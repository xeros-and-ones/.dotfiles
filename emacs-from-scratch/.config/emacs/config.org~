#+TITLE: My Emacs literate Config from Scratch
#+NAME: Mohamed Tarek
#+EMAIL: m96tarek@gmail.com
#+STARTUP: overview

* Table Of Content :TOC_5_gh:


* About
** TODO Installation

Clone this repository to ~/.emacs.d or ~/.config/emacs
#+BEGIN_SRC sh :tangle no
git clone https://github.com/KaratasFurkan/.emacs.d.git
#+END_SRC

Open Emacs and let the configuration install necessary packages.

Note: This configuration is *not* intended to be directly used by others, but it
can be useful to get inspired or copy some parts of it. I use *Emacs 29.1.90* but
most of this configuration will probably work in older versions too.

** Literate Configuration

This *README.org* file is the actual main configuration file. I use [[file:init.el][init.el]] just
to load the tangled/exported elisp file or generate it if it doesn't exist yet.

init.el:
#+BEGIN_SRC emacs-lisp :tangle init.el
(defconst config-org (locate-user-emacs-file "README.org"))
(defconst config-el (locate-user-emacs-file "config.el"))

(unless (file-exists-p config-el)
  (require 'org)
  (org-babel-tangle-file config-org config-el))

(load-file config-el)
#+END_SRC

Initialization flow:
#+BEGIN_SRC artist :tangle no
   +-------+
   | Emacs |
   +-------+                               open  +----------+
       |     if config.el doesn't exist  /-----> |README.org|
       v                     /-----------        +----------+
   +-------+     /-----------                          |  tangle/export elisp blocks
   |init.el| ----                                      |
   +-------+     \-----------                          v  load
                             \-----------  load  +----------+
                 if config.el exists     \-----> |config.el |
                                                 +----------+
#+END_SRC

** early-init.el

Note that a few of the code blocks (mostly UI related) in this configuration
tangle to =early-init.el= instead of =config.el= (which is the elisp file generated
by this org file) to get the effects in the very beginning of the
initialization.

** Synchronizing Changes

The simplest solution is running =(org-babel-tangle-file config-org config-el)=.
However, it hangs Emacs when there are a lot of code blocks. So I created the
=fk/tangle-config= command below to make it asynchronous.

It can be called manually with =M-x fk/tangle-config RET= but I prefer to call it
automatically after each time I save this =README.org= file. To achieve this, I
added an =after-save-hook= in the [[#---local-variables---][-- Local Variables --]] section.
#+BEGIN_SRC emacs-lisp
(defun fk/tangle-config ()
  "Export code blocks from the literate config file asynchronously."
  (interactive)
  (make-process
   :command `("emacs" ,config-org "--batch" "--eval"
              ,(format "(org-babel-tangle nil \"%s\")" config-el))
   :name "tangle-process"
   :filter (lambda (process output) (message (string-trim output)))))

;; prevent emacs from killing itself until the tangle-process finished
(add-to-list 'kill-emacs-query-functions
             (lambda ()
               (or (not (process-live-p (get-process "tangle-process")))
                   (y-or-n-p "\"fk/tangle-config\" is running; kill it? "))))
#+END_SRC
