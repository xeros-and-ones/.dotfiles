#+TITLE: My Emacs literate Config from Scratch
#+NAME: Mohamed Tarek
#+EMAIL: m96tarek@gmail.com
#+STARTUP: overview

* Table Of Content :toc:
- [[#about][About]]
  - [[#installation][Installation]]
  - [[#literate-configuration][Literate Configuration]]
  - [[#early-initel][early-init.el]]
  - [[#synchronizing-changes][Synchronizing Changes]]
- [[#package-management][Package Management]]
  - [[#notes][Notes]]
- [[#performance-optimizations][Performance Optimizations]]
  - [[#my-tricky-method-of-delaying-package-loads][My tricky method of delaying package loads]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#file-handler][File Handler]]
  - [[#custom-functions][Custom Functions]]
- [[#evil-mode][Evil Mode]]
- [[#emacs][Emacs]]
  - [[#better-defaults][Better Defaults]]
  - [[#appearance][Appearance]]
  - [[#helpful][Helpful]]
  - [[#menu-style-keybindings][Menu Style Keybindings]]
  - [[#file-locations-no-littering][File Locations (no-littering)]]
- [[#---local-variables---][---Local-Variables---]]

* About
** TODO Installation

Clone this repository to ~/.emacs.d or ~/.config/emacs
#+BEGIN_SRC sh :tangle no

#+END_SRC

Open Emacs and let the configuration install necessary packages.

Note: This configuration is *not* intended to be directly used by others, but it
can be useful to get inspired or copy some parts of it. I use *Emacs 29.1.90* but
most of this configuration will probably work in older versions too.

** Literate Configuration

This *README.org* file is the actual main configuration file. I use [[file:init.el][init.el]] just
to load the tangled/exported elisp file or generate it if it doesn't exist yet.

init.el:
#+BEGIN_SRC emacs-lisp :tangle init.el
;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-
;; NOTE: init.el is now generated from readme.org.  Please edit that file instead

(defconst config-org (locate-user-emacs-file "README.org"))
(defconst config-el (locate-user-emacs-file "config.el"))

(unless (file-exists-p config-el)
(require 'org)
(org-babel-tangle-file config-org config-el))

(load-file config-el)
;;; init.el ends here
#+END_SRC

** early-init.el

Note that a few of the code blocks (mostly UI related) in this configuration
tangle to =early-init.el= instead of =config.el= (which is the elisp file generated
by this org file) to get the effects in the very beginning of the
initialization.

** Synchronizing Changes

The simplest solution is running =(org-babel-tangle-file config-org config-el)=.
However, it hangs Emacs when there are a lot of code blocks. So I created the
=xero/tangle-config= command below to make it asynchronous.

It can be called manually with =M-x xero/tangle-config RET= but I prefer to call it
automatically after each time I save this =README.org= file. To achieve this, I
added an =after-save-hook= in the [[#---local-variables---][-- Local Variables --]] section.
#+BEGIN_SRC emacs-lisp
  ;;; config.el -*- lexical-binding: t; -*-
  (defun xero/tangle-config ()
    "Export code blocks from the literate config file asynchronously."
    (interactive)
    ;; prevent emacs from killing until tangle-process finished
    (add-to-list 'kill-emacs-query-functions
		 (lambda ()
		   (or (not (process-live-p (get-process "tangle-process")))
		       (y-or-n-p "\"xero/tangle-config\" is running; kill it? "))))
    ;; tangle config asynchronously
    (xero/async-process
     (format "emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'" config-org config-el)
     "tangle-process"))
#+END_SRC

If the current org file is the literate config file, add a local hook to tangle
code blocks on every save to update configuration.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (if (equal buffer-file-truename config-org)
                (xero/add-local-hook 'after-save-hook xero/tangle-config))))
#+END_SRC

* Package Management

Taken from: https://github.com/raxod502/straight.el#getting-started
#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t)
  (setq straight-vc-git-default-clone-depth 1)
  (setq straight-recipes-gnu-elpa-use-mirror t)
  (setq straight-check-for-modifications '(check-on-save find-when-checking))
  ;; (setq straight-check-for-modifications nil)
  (setq use-package-always-defer t)
  (defvar bootstrap-version)
  (let* ((straight-repo-dir
	  (expand-file-name "straight/repos" user-emacs-directory))
	 (bootstrap-file
	  (concat straight-repo-dir "/straight.el/bootstrap.el"))
	 (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (shell-command
       (concat
	"mkdir -p " straight-repo-dir " && "
	"git -C " straight-repo-dir " clone "
	"https://github.com/raxod502/straight.el.git && "
	"git -C " straight-repo-dir " checkout 2d407bc")))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
  ;; This is a variable that has been renamed but straight still refers when
  ;; doing :sraight (:no-native-compile t)
  (setq comp-deferred-compilation-black-list nil)
  (setq use-package-compute-statistics t)
#+END_SRC

Ignore local variables when visiting an installed package which is generally not intended to be edited.
  
#+BEGIN_SRC emacs-lisp
(defun xero/straight-ignore-local-variables (orig-func &rest args)
  (unless (string-prefix-p (straight--dir) default-directory)
    (apply orig-func args)))

(advice-add 'hack-local-variables-confirm :around 'xero/straight-ignore-local-variables)
#+END_SRC

** Notes
- =M-x straight-pull-all=: update all packages.
- =M-x straight-normalize-all=: restore all packages (remove local edits)
- =M-x straight-freeze-versions= and =M-x straight-thaw-versions= are like =pip
  freeze requirements.txt= and =pip install -r requirements.txt=
- To tell straight.el that you want to use the version of Org shipped with
  Emacs, rather than cloning the upstream repository:
(Note: ":tangle no")
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org
  :straight (:type built-in))
#+END_SRC

- Hooks in the =:hook= section, run in reverse order. Example:
(Note: ":tangle no")
#+BEGIN_SRC emacs-lisp :tangle no
(use-package package-name
  :hook
  (x-mode . last)
  (x-mode . second)
  (x-mode . first))
#+END_SRC

* Performance Optimizations

A very nice source: https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly

** My tricky method of delaying package loads

In my configuration, you will see lots of =dashboard-after-initialize-hook=
hooks. I use these hooks for almost all the packages that I want to load
immediately after Emacs starts.

The trick is these hooks run after the dashboard is fully initialized, and since
I spend a few seconds to check my dashboard every time I open Emacs, packages
can be loaded during that time without me even noticing. Thanks to the deferred
loads, my configuration is already fast enough for me even without this trick
but it feels much better to see the dashboard instantly.

Lastly, I like to see a success message in the echo area after all packages are
loaded. So let's add it at the end of =dashboard-after-initialize-hook=.
#+BEGIN_SRC emacs-lisp
(add-hook 'dashboard-after-initialize-hook
          (lambda ()
            (message "Emacs started successfully.")) 100)
#+END_SRC

** Garbage Collection

Make startup faster by reducing the frequency of garbage collection. Set
gc-cons-threshold (the default is 800 kilobytes) to maximum value available, to
prevent any garbage collection from happening during load time.

Note: tangle to early-init.el to make startup even faster
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
  ;; NOTE: early-init.el is now generated from readme.org.  Please edit that file instead

  ;; Defer garbage collection further back in the startup process
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.6)

  ;; In Emacs 27+, package initialization occurs before `user-init-file' is
  ;; loaded, but after `early-init-file'. Doom handles package initialization, so
  ;; we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)
  ;; Do not allow loading from the package cache (same reason).
  (setq package-quickstart nil)

  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setopt
   frame-inhibit-implied-resize t  ; inhibit frame resize at startup
   inhibit-compacting-font-caches t)

  (setq-default
   ring-bell-function 'ignore                    ; prevent beep sound.
   inhibit-startup-screen t                      ; TODO: maybe better on early-init or performance?
   initial-major-mode 'fundamental-mode          ; TODO: maybe better on early-init or performance?
   initial-scratch-message nil                   ; TODO: maybe better on early-init?
   )
  ;; Disable GUI elements
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
  ;; compiled ahead-of-time when they are installed and site files are compiled
  ;; when gccemacs is installed.
  (setq comp-deferred-compilation nil)

#+END_SRC

Restore it to reasonable value after init. Also stop garbage collection during
minibuffer interaction (e.g. helm, vertico).
#+BEGIN_SRC emacs-lisp
(defconst 1mb 1048576)
(defconst 20mb 20971520)
(defconst 30mb 31457280)
(defconst 50mb 52428800)

(defun xero/defer-garbage-collection ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun xero/restore-garbage-collection ()
  (run-at-time 1 nil (lambda () (setq gc-cons-threshold 30mb))))

(add-hook 'emacs-startup-hook 'xero/restore-garbage-collection 100)
(add-hook 'minibuffer-setup-hook 'xero/defer-garbage-collection)
(add-hook 'minibuffer-exit-hook 'xero/restore-garbage-collection)

(setq read-process-output-max 1mb)  ;; lsp-mode's performance suggest
#+END_SRC

** File Handler

Similar to garbage collection optimization.

(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (unless (daemonp)
    (defvar default-file-name-handler-alist file-name-handler-alist)
    (setopt file-name-handler-alist nil)

    (add-hook 'emacs-startup-hook
		(lambda ()
		(setopt file-name-handler-alist default-file-name-handler-alist)) 100))
#+END_SRC

** Custom Functions
*** measure-time

(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el

  (defmacro xero/measure-time (&rest body)
    "Measure the time it takes to evaluate BODY."
    `(let ((time (current-time)))
       ,@body
       (message "%s" (float-time (time-since time)))))

#+END_SRC

*** time-since-startup
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el

  (defun xero/time-since-startup (&optional prefix)
    "Display the time that past since emacs startup. Add PREFIX if given at the
  start of message for debug purposes."
    (interactive)
    (let* ((prefix (or prefix ""))
	   (time (float-time (time-since before-init-time)))
	   (str (format "%s%s seconds" prefix time)))
      (if (or (not (string-empty-p prefix))
	      (called-interactively-p 'interactive))
	  (message str)
	str)))

#+END_SRC

*** time-since-last-check
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el

(defvar fk/time-last-check nil)
(defvar fk/time-threshold 0)
(setq fk/time-threshold 0.02)

(defun fk/time-since-last-check (&optional prefix)
  "Display the time that past since last check. Add PREFIX if given at the
start of message for debug purposes."
  (interactive)
  (let* ((prefix (or prefix ""))
         (time (float-time (time-since (or fk/time-last-check before-init-time))))
         (str (format "%s%s seconds" prefix time)))
    (setq fk/time-last-check (current-time))
    (if (or (not (string-empty-p prefix))
            (called-interactively-p 'interactive))
        (when (> time fk/time-threshold) (message "%s" str))
      str)))

;;; early-init.el ends here
#+END_SRC

* Evil Mode

Evil Config for the Stubborn vim hacker
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :init
    (setq evil-want-integration t
	  evil-want-keybinding nil
	  evil-want-C-u-scroll t
	  evil-want-C-i-jump nil
	  evil-want-find-undo t
	  evil-undo-system 'undo-tree
	  evil-cross-line t
	  evil-split-window-below t
	  evil-split-window-right t
	  evil-kill-on-visual-paste nil
	  evil-echo-state nil
	  evil-respect-visual-line-mode t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'backward-char)
    (define-key evil-insert-state-map (kbd "C-l") 'forward-char)
    (define-key evil-insert-state-map (kbd "C-j") 'forward-line)
    (define-key evil-insert-state-map (kbd "C-k") 'backward-line)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

  ;; Add more Vim keybindings
  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (evil-collection-init))

  ;; Comment/uncomment lines with Alt-/
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+END_SRC

* Ema qcs
** Better Defaults

#+BEGIN_SRC emacs-lisp
    (setq-default
     create-lockfiles nil                          ; .#locked-file-name
     confirm-kill-processes nil                    ; exit emacs without asking to kill processes
     backup-by-copying t                           ; prevent linked files
     require-final-newline t                       ; always end files with newline
     delete-old-versions t                         ; don't ask to delete old backup files
     revert-without-query '(".*")                  ; `revert-buffer' without confirmation
     uniquify-buffer-name-style 'forward           ; non-unique buffer name display: unique-part/non-unique-filename
     fast-but-imprecise-scrolling t                ; supposed to make scrolling faster on hold
     window-resize-pixelwise t                     ; correctly resize windows by pixels (e.g. in split-window functions)
     frame-resize-pixel-wise t
     native-comp-async-report-warnings-errors nil  ; disable annoying native-comp warnings
     ad-redefinition-action 'accept                ; disable annoying "ad-handle-definition: ‘some-function’ got redefined" warnings
     vc-follow-symlinks t
     use-short-answers t                           ; e.g. `y-or-n-p' instead of `yes-or-no-p'
     sentence-end-double-space nil
     help-enable-symbol-autoload t)                ; perform autoload if docs are missing from autoload objects.

    (setq user-full-name "Mohamed Tarek"
	  user-mail-address "m96tarek@gmail.com")

    (global-auto-revert-mode)

    (save-place-mode)

    (global-so-long-mode)

    (bind-key* "M-r" 'repeat)
  ;; default to utf-8 for all the things
    (set-charset-priority 'unicode)
    (setq locale-coding-system 'utf-8
	    coding-system-for-read 'utf-8
	    coding-system-for-write 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

    (setq cusom-safe-themes t
	  enable-local-variables :all)

    ;; enable winner mode globally for undo/redo window layout changes
    (winner-mode t)
    (show-paren-mode t)

    ;; less noise when compiling elisp
    (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
    (setq load-prefer-newer t)

    ;; write over selected text on input... like all modern editors do
    (delete-selection-mode t)

    (recentf-mode t)
    (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
			    ,(expand-file-name "eln-cache/" user-emacs-directory)
			    ,(expand-file-name "etc/" user-emacs-directory)
			    ,(expand-file-name "var/" user-emacs-directory)))

    (defun xero/add-local-hook (hook function)
      "Add buffer-local hook."
      (add-hook hook function :local t))

    (defun xero/async-process (command &optional name filter)
      "Start an async process by running the COMMAND string with bash. Return the
    process object for it.

    NAME is name for the process. Default is \"async-process\".

    FILTER is function that runs after the process is finished, its args should be
    \"(process output)\". Default is just messages the output."
      (make-process
       :command `("bash" "-c" ,command)
       :name (if name name
	       "async-process")
       :filter (if filter filter
		 (lambda (process output) (message (s-trim output))))))

    ;; Examples:
    ;;
    ;; (xero/async-process "ls")
    ;;
    ;; (xero/async-process "ls" "my ls process"
    ;;                   (lambda (process output) (message "Output:\n\n%s" output)))
    ;;
    ;; (xero/async-process "unknown command")

    ;; Make sure to focus when a new emacsclient frame created.
    (add-hook 'server-after-make-frame-hook (lambda () (select-frame-set-input-focus (selected-frame))))

    (defalias 'narrow-quit 'widen)  ; I forget `widen' everytime

    ;; TODO: lset would be useful too
    (defmacro l (func &rest args)
      "Shorter lambda."
      `(lambda nil (apply ,func '(,@args))))

    (defmacro li (func &rest args)
      "Shorter lambda, interactive."
      `(lambda nil (interactive) (apply ,func '(,@args))))

    ;; Examples:
    ;; (global-set-key (kbd "C-V") (lambda () (interactive) (next-line 10))) -- Classical
    ;; would be --v
    ;; (global-set-key (kbd "C-V") (li 'next-line 10)) -- With li macro
#+END_SRC

** Appearance
*** Better Defaults
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
(blink-cursor-mode -1)

(setq-default
 truncate-lines t
 frame-title-format '("Emacs | %b"))  ; Emacs | buffer-name
#+END_SRC

*** Font
**** Font
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst xero/default-font-family "CaskaydiaCove Nerd Font")
(defconst xero/default-font-size 100)
(defconst xero/default-icon-size 15)

(defconst xero/variable-pitch-font-family "Rubik")

(custom-set-faces
 `(default ((t (:family ,xero/default-font-family :height ,xero/default-font-size
 :weight 'semi-bold))))
 `(variable-pitch ((t (:family ,xero/variable-pitch-font-family :height 1.0))))
 ;; Characters with fixed pitch face do not shown when height is 90.
 `(fixed-pitch-serif ((t (:height 1.2)))))
#+END_SRC

**** Custom Functions
***** adjust-font-size
#+BEGIN_SRC emacs-lisp
(defun xero/adjust-font-size (height)
  "Adjust font size by given height. If height is '0', reset font
size. This function also handles icons and modeline font sizes."
  (interactive "nHeight ('0' to reset): ")
  (let ((new-height (if (zerop height)
                        xero/default-font-size
                      (+ height (face-attribute 'default :height)))))
    (set-face-attribute 'default nil :height new-height)
    (set-face-attribute 'mode-line nil :height new-height)
    (set-face-attribute 'mode-line-inactive nil :height new-height)
    (message "Font size: %s" new-height))
  (let ((new-size (if (zerop height)
                      xero/default-icon-size
                    (+ (/ height 5) treemacs--icon-size))))
    (when (fboundp 'treemacs-resize-icons)
      (treemacs-resize-icons new-size))
    (when (fboundp 'company-box-icons-resize)
      (company-box-icons-resize new-size)))
  (when diff-hl-mode
    (diff-hl-maybe-redefine-bitmaps)))
#+END_SRC

***** increase-font-size
#+BEGIN_SRC emacs-lisp
(defun xero/increase-font-size ()
  "Increase font size by 0.5 (5 in height)."
  (interactive)
  (xero/adjust-font-size 5))
#+END_SRC

***** decrease-font-size
#+BEGIN_SRC emacs-lisp
(defun xero/decrease-font-size ()
  "Decrease font size by 0.5 (5 in height)."
  (interactive)
  (xero/adjust-font-size -5))
#+END_SRC

***** reset-font-size
#+BEGIN_SRC emacs-lisp
(defun xero/reset-font-size ()
  "Reset font size according to the `xero/default-font-size'."
  (interactive)
  (xero/adjust-font-size 0))
#+END_SRC

**** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'xero/increase-font-size)
(global-set-key (kbd "C--") 'xero/decrease-font-size)
(global-set-key (kbd "C-0") 'xero/reset-font-size)
#+END_SRC


** Helpful

A better, more detailed *help* buffer.
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :after evil
    :init
    (setq evil-lookup-func #'helpful-at-point)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap descrive-symbol] . helpful-symbol)
    ([remap describe-key] . helpful-key))
#+END_SRC

** TODO Menu Style Keybindings
Menu style keybindings like Spacemacs.
#+BEGIN_SRC emacs-lisp
;; NOTE: I use F1 as C-h (paging & help).
(bind-keys*
 :prefix-map xero/menu-map
 :prefix "M-m"
 ("M-m" . which-key-show-major-mode)
 ("M-h" . help-command)
 ("M-u" . universal-argument)
 :map xero/menu-map :prefix-map buffers         :prefix "b"
 :map xero/menu-map :prefix-map comments        :prefix "c"
 :map xero/menu-map :prefix-map django          :prefix "d"
 :map xero/menu-map :prefix-map errors          :prefix "e"
 :map xero/menu-map :prefix-map files           :prefix "f"
 :map xero/menu-map :prefix-map org             :prefix "o"
 :map xero/menu-map :prefix-map text            :prefix "t"
 :map xero/menu-map :prefix-map version-control :prefix "v"
 :map xero/menu-map :prefix-map windows         :prefix "w")
#+END_SRC

** File Locations (no-littering)

#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))

  (setq auto-save-file-name-transforms  ; autosaved-file-name~
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))
        custom-file (no-littering-expand-etc-file-name "custom.el"))

  (when (file-exists-p custom-file)
    ;; Load `custom-set-variables', not load whole `custom.el' with unwanted
    ;; `custom-set-faces'
    (with-current-buffer (find-file-noselect custom-file)
      (goto-char 0)
      (forward-sexp)
      (call-interactively 'eval-last-sexp)
      (kill-buffer)))

  (defconst xero/static-directory (locate-user-emacs-file "static/"))

  (defun xero/expand-static-file-name (file)
    "Expand filename FILE relative to `xero/static-directory'."
    (expand-file-name file xero/static-directory)))
#+END_SRC




* ---Local-Variables---
