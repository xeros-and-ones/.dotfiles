#+TITLE: My Doom Emacs Literate Config
#+STARTUP: overview
#+OPTIONS: toc:nil


* Table Of Content :TOC_5_gh:
- [[#introduction][Introduction]]
  - [[#instalation][instalation]]
    - [[#emacs][emacs:]]
    - [[#todo-private-doom-config][TODO: Private Doom config]]
    - [[#doom][Doom:]]
- [[#initialization][Initialization]]
- [[#packages][Packages]]
- [[#configuration][configuration]]
  - [[#autoload-modules][autoload modules]]
    - [[#bufferel][buffer.el]]
    - [[#gitel][git.el]]
    - [[#miscel][misc.el]]
    - [[#osel][os.el]]
    - [[#progel][prog.el]]
    - [[#textel][text.el]]
    - [[#uiel][ui.el]]
  - [[#modules][modules]]
    - [[#lazycat][lazycat]]
      - [[#autoload][autoload]]
      - [[#configel][config.el]]
      - [[#packagesel][packages.el]]
    - [[#my-checker][my-checker]]
      - [[#autoload-1][autoload]]
      - [[#configel-1][config.el]]
      - [[#packagesel-1][packages.el]]
    - [[#nano-emacs][nano-emacs]]
      - [[#configel-2][config.el]]
      - [[#packagesel-2][packages.el]]
    - [[#my-python][my-python]]
      - [[#autoload-2][autoload]]
      - [[#configel-3][config.el]]
      - [[#packagesel-3][packages.el]]
  - [[#configel-4][config.el]]
    - [[#imprting-custom-config-files][imprting custom config files]]
    - [[#name-and-email][Name and email]]
    - [[#misc-config][misc config]]
  - [[#uiel-1][+ui.el]]
    - [[#setting-fonts][Setting fonts]]
    - [[#emacs-window-setup][Emacs Window Setup]]
    - [[#theme][Theme]]
    - [[#ui-config][UI config]]
  - [[#textel-1][+text.el]]
    - [[#text][text]]
    - [[#org][ORG]]
    - [[#markdown][MARKDOWN]]
    - [[#others][OTHERS]]
  - [[#progel-1][+prog.el]]
    - [[#misc][MISC]]
    - [[#cc][CC]]
    - [[#js-web][JS, WEB]]
    - [[#java][JAVA]]
    - [[#debug--run][DEBUG & RUN]]
    - [[#language-customization][LANGUAGE CUSTOMIZATION]]
  - [[#osel-1][+os.el]]
    - [[#macos][MACOS]]
    - [[#linux][LINUX]]
    - [[#trash][TRASH]]
  - [[#miscel-1][+misc.el]]
    - [[#use-chrome-to-browse][use chrome to browse]]
    - [[#spell-dict-file][Spell dict file]]
    - [[#screenshot][Screenshot]]
    - [[#centaur-tabs][Centaur-tabs]]
    - [[#input-method][INPUT METHOD]]
    - [[#log][LOG]]
    - [[#ssh][SSH]]
    - [[#navigation][NAVIGATION]]
    - [[#tmux][TMUX]]
    - [[#imenu-list][imenu-list]]
    - [[#better-jumper-post-jump-hook][better-jumper-post-jump-hook]]
    - [[#nav-flash][nav-flash]]
    - [[#dired][dired]]
    - [[#ranger][ranger]]
    - [[#dash-docs][dash-docs]]
    - [[#citre][CITRE]]
    - [[#translate][TRANSLATE]]
    - [[#quickrun][QUICKRUN]]
    - [[#projectile][PROJECTILE]]
    - [[#completion][COMPLETION]]
    - [[#atomic-chrome][ATOMIC CHROME]]
    - [[#prodigy][PRODIGY]]
    - [[#term][TERM]]
  - [[#lspel][+lsp.el]]
    - [[#clangd][clangd]]
    - [[#typescript][TypeScript]]
    - [[#java-1][Java]]
    - [[#lsp-mode--lsp-ui][lsp-mode & lsp-ui]]
    - [[#lsp-docker][lsp-docker]]
  - [[#eglotel][+eglot.el]]
- [[#modes-config][Modes Config]]
  - [[#python-setup][Python Setup]]
  - [[#web-mode-setup][Web-mode Setup]]
- [[#plugins-custom-configs][Plugins Custom Configs]]
  - [[#evil-snipe][evil-snipe]]
- [[#git][GIT]]
- [[#bindings][Bindings]]

* Introduction
This is my Private Literate config for doom-emacs.
My config was growing with time So i Moved it to a literate type of config in hopes of keeping it organized.
** instalation
*** emacs:
We first gotta make sure emacs is installed and properly:
First:
#+begin_src sh :tangle no
mkcd ~/Build/Emacs

git clone https://git.savannah.gnu.org/git/emacs.git master
#+end_src

We then should use the amazing git worktree, to insure not to contaminate the
master branch:
#+begin_src sh :tangle no
git worktree add ../my-custom-build (choose name you prefer)

cd ../my-custom-build
#+end_src

Afterwards We could Start the build process:
#+begin_src sh :tangle no
./autogen.sh

#+end_src
And Then Run the Config script with the desired flags:
#+begin_src
./configure --with-cairo --with-x-toolkit=lucid --with-tree-sitter --without-compress-install --with-harfbuzz --with-json --without-gsettings --without-gconf--with-mailutils --with-native-compilation=aot --with-imagemagick --program-transform-name='s/^ctags$/ctags.emacs/' --with-modules CFLAGS="-O3 -march=native -flto"
#+end_src

Then start the build Process itself:
#+begin_src sh :tangle no
make -jN (N = number of cores you have in your cpu)
#+end_src

Now we're free to install locally:
#+begin_src sh :tangle no
sudo make install
#+end_src

*** TODO: Private Doom config
#+begin_src sh :tangle no

#+end_src

*** Doom:
To install, we have to first clone doom emacs base config:
#+begin_src sh :tangle no
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install
#+end_src

* Initialization
this the first thing to be processed by doom emacs.
#+begin_src emacs-lisp :tangle init.el

;;; init.el -*- lexical-binding: t; -*-


(doom! :input
       ;;bidi                          ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout                        ; auie,ctsrnm is the superior home row

       :completion
       ( company +childframe)          ; the ultimate code completion backend
       ;;(helm              ; the *other* search engine for love and life
       ;;+fuzzy)            ; enable fuzzy search backend for helm
       ;;ido                ; the other *other* search engine...
       ;; (ivy               ; a search engine for love and life
       ;;  +icons
       ;;  +prescient       ; disabled due to ! invert match not working
       ;;  +childframe)
       (vertico           ; the search engine of the future
        +icons)

       :ui
       ;;deft                          ; notational velocity for Emacs
       doom                            ; what makes DOOM look the way it does
       doom-dashboard                  ; a nifty splash screen for Emacs
       ;;doom-quit                     ; DOOM quit-message prompts when you quit Emacs
       (emoji +ascii +github +unicode) ; ðŸ™‚
       hl-todo                         ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides                   ; highlighted indent columns
       ligatures                       ; ligatures and symbols to make your code pretty again
       ;;minimap                       ; show a map of the code on the side
       modeline                        ; snazzy, Atom-inspired modeline, plus API
       nav-flash                       ; blink cursor line after big motions
       ;                               ; neotree           ; a project drawer, like NERDTree for vim
       ophints                         ; highlight the region an operation acts on
       (popup +all +defaults)          ; tame sudden yet inevitable temporary windows
       tabs                            ; a tab bar for Emacs
       ( treemacs +lsp)                ; a project drawer, like neotree but cooler
       unicode                         ; extended unicode support for various languages
       (vc-gutter +pretty)             ; vcs diff in the fringe
       vi-tilde-fringe                 ; fringe tildes to mark beyond EOB
       ;;window-select                 ; visually switch windows
       workspaces                      ; tab emulation, persistence & separate workspaces
       zen                             ; distraction-free coding or writing

       :editor
       (evil +everywhere)              ; come to the dark side, we have cookies
       file-templates                  ; auto-snippets for empty files
       fold                            ; (nigh) universal code folding
       (format +onsave)                ; automated prettiness
       ;;god                           ; run Emacs commands without modifier keys
       ;;lispy                         ; vim for lisp, for people who don't like vim
       multiple-cursors                ; editing in many places at once
       ;;objed                         ; text object editing for the innocent
       ;;parinfer                      ; turn lisp into python, sort of
       ;;rotate-text                   ; cycle region at point between text candidates
       snippets                        ; my elves. They type so I don't have to
       ;;word-wrap                     ; soft wrapping with language-aware indent

       :emacs
       (dired                          ; making dired pretty [functional]
        +ranger                        ; bringing the goodness of ranger to dired
        +icons)                        ; colorful icons for dired-mode
       electric                        ; smarter, keyword-based electric-indent
       ibuffer                         ; interactive buffer management
       undo                            ; persistent, smarter undo for your inevitable mistakes
       vc                              ; version-control and Emacs, sitting in a tree

       :term
       eshell                          ; the elisp shell that works everywhere
       ;;shell                         ; simple shell REPL for Emacs
       ;;term                          ; basic terminal emulator for Emacs
       vterm                           ; the best terminal emulation in Emacs

       :checkers
       (syntax
        +childframe
        )                              ; tasing you for every semicolon you forget
       ;; (spell +aspell)                 ; tasing you for misspelling mispelling
       grammar                         ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio                        ; Writes a PhD for you (citation needed)
       ;;collab                        ; buffers with friends
       ( debugger +lsp)                ; FIXME stepping through code, to help you add bugs
       direnv
       docker
       editorconfig                    ; let someone else argue about tabs vs spaces
       ;;ein                           ; tame Jupyter notebooks with emacs
       (eval +overlay)                 ; run code, run (also, repls)
       ;;gist                          ; interacting with github gists
       (lookup                         ; navigate your code and its documentation
        +dictionary                    ; enable word definition and thesaurus lookup functionality
        +devdocs                       ; ...on devdocs.io online
        +docsets)                      ; ...or in Dash docsets locally
       ( lsp +peek)                    ; M-x vscode
       magit                           ; a git porcelain for Emacs
       make                            ; run make tasks from Emacs
       ;;pass                          ; password manager for nerds
       pdf                             ; pdf enhancements
       prodigy                         ; FIXME managing external services & code builders
       rgb                             ; creating color strings
       taskrunner                      ; taskrunner for all your projects
       terraform                       ; infrastructure as code
       ;;tmux                          ; an API for interacting with tmux
       tree-sitter                     ; syntax and parsing, sitting in a tree...
       ;;upload                        ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       (tty +osc)                      ; improve the terminal Emacs experience

       :lang
       ;;agda                          ; types of types of types of types...
       ;;beancount                     ; mind the GAAP
       (cc +lsp +tree-sitter)          ; C > C++ == 1
       ;;clojure                       ; java with a lisp
       ;;common-lisp                   ; if you've seen one lisp, you've seen them all
       ;;coq                           ; proofs-as-programs
       ;;crystal                       ; ruby at the speed of c
       ;;csharp                        ; unity, .NET, and mono shenanigans
       data                            ; config/data formats
       ;;(dart +flutter)               ; paint ui and not much else
       ;;dhall
       ;;elixir                        ; erlang done right
       ;;elm                           ; care for a cup of TEA?
       emacs-lisp                      ; drown in parentheses
       ;;erlang                        ; an elegant language for a more civilized age
       ;;ess                           ; emacs speaks statistics
       ;;factor
       ;;faust                         ; dsp, but you get to keep your soul
       ;;fortran                       ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp                        ; ML stands for Microsoft's Language
       ;;fstar                         ; (dependent) types and (monadic) effects and Z3
       ;;gdscript                      ; the language you waited for
       (go +lsp +tree-sitter)          ; the hipster dialect
       ;;(graphql +lsp)                ; Give queries a REST
       ;;(haskell +lsp)                ; a language that's lazier than I am
       ;;hy                            ; readability of scheme w/ speed of python
       ;;idris                         ; a language you can depend on
       (json +lsp +tree-sitter)        ; At least it ain't XML
       ;;(java +lsp)                   ; the poster child for carpal tunnel syndrome
       (javascript +lsp +tree-sitter)  ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia                         ; a better, faster MATLAB
       ;;kotlin                        ; a better, slicker Java(Script)
       ;;latex                         ; writing papers in Emacs has never been so fun
       ;;lean                          ; for folks with too much to prove
       ;;ledger                        ; be audit you can be
       ( lua +lsp +tree-sitter)        ; one-based indices? one-based indices
       (markdown +grip)                ; writing docs for people to ignore
       ;;nim                           ; python + lisp at the speed of c
       ;;nix                           ; I hereby declare "nix geht mehr!"
       ;;ocaml                         ; an objective camel
       (org                            ; organize your plain life in plain text
        ;                              ; +pretty
        +dragndrop                     ; drag & drop files/images into org buffers
        +pandoc                        ; export-with-pandoc support
        +present)                      ; using org-mode for presentations
       ;;php                           ; perl's insecure younger brother
       ;;plantuml                      ; diagrams for confusing people more
       ;;purescript                    ; javascript, but functional
       (python
        ;; +pyenv
        +conda
        +poetry
        +pyright
        +lsp
        +tree-sitter)                  ; beautiful is better than ugly
       ;;qt                            ; the 'cutest' gui framework ever
       ;;racket                        ; a DSL for DSLs
       ;;raku                          ; the artist formerly known as perl6
       ;;rest                          ; Emacs as a REST client
       ;;rst                           ; ReST in peace
       ;;(ruby +rails)                 ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp +tree-sitter)        ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala                         ; java, but good
       ;;(scheme +guile)               ; a fully conniving family of lisps
       (sh +lsp +tree-sitter)          ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity                      ; do you need a blockchain? No.
       ;;swift                         ; who asked for emoji variables?
       ;;terra                         ; Earth and Moon in alignment for performance.
       ( web +lsp +tree-sitter)        ; the tubes
       (yaml +lsp +tree-sitter)        ; JSON, but readable
       (zig +lsp +tree-sitter)         ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere                    ; *leave* Emacs!? You must be joking
       ;;irc                           ; how neckbeards socialize
       ;;(rss +org)                    ; emacs as an RSS reader
       ;;twitter                       ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens +snippets)


       :private
       ;; lazycat          ; snails, color-rg, fuz
       my-python
       my-checker
       ;; nano-theme
       )

(setq custom-file (expand-file-name "custom.el" doom-local-dir))
(load custom-file 'no-error 'no-message)

#+end_src

* Packages
in this part, we disable packages that are added by doom
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; private/my/packages.el

;; disabled packages
(disable-packages! solaire-mode
                   osx-trash
                   realgud
                   realgud-trepan-ni
                   ccls
                   tide
                   swiper
                   forge
                   code-review
                   anaconda-mode
                   company-anaconda
                   lsp-python-ms
                   pyimport)
#+end_src

and Here we add the packages want installed
#+begin_src emacs-lisp :tangle packages.el
;; text
(package! adoc-mode)
(package! tldr)
(package! edit-indirect)
(package! blog-admin :recipe (:host github :repo "codefalling/blog-admin"))
;; (package! youdao-dictionary)
(package! link-hint)
(package! symbol-overlay)
(package! pomm)
(package! org-appear)

;; misc
(package! format-all)
(package! keycast)
(package! evil-string-inflection)
(package! all-the-icons-ibuffer)
(package! dired-narrow)
(package! atomic-chrome)
(package! git-link)
(package! magit-delta)
(package! citre)
(package! imenu-list)
;; (package! tmux-pane)
(package! rime :recipe (:host github :repo "DogLooksGood/emacs-rime" :files ("*.el" "Makefile" "lib.c")))
(package! go-translate)
;; (package! org-roam-ui)
;; (package! md-roam :recipe (:host github :repo "nobiot/md-roam"))

;; programming
(package! bazel-mode :recipe (:host github :repo "bazelbuild/emacs-bazel-mode"))
(package! graphql-mode)
(package! protobuf-mode)
(package! gn-mode)
(when (modulep! :tools lsp +eglot)
  (package! breadcrumb :recipe (:host github :repo "joaotavora/breadcrumb"))
  (package! eglot-java)
  )
(when (not (modulep! :tools lsp +eglot))
  (package! lsp-docker))

#+end_src

* configuration
** autoload modules
*** buffer.el
#+begin_src emacs-lisp :tangle autoload/buffer.el :mkdirp yes
;;; ~/.doom.d/autoload/buffer.el -*- lexical-binding: t; -*-

;;;###autoload
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive)
  (save-buffer)
  (revert-buffer :ignore-auto :noconfirm))

;;;###autoload
(defun reload-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive)
  (save-buffer)
  (let ((f buffer-file-name))
    (kill-this-buffer)
    (find-file f)))

;;;###autoload
(defun indent-buffer ()
  "Indent the currently visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))

;;;###autoload
(defun indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  (save-excursion
    (if (region-active-p)
        (progn
          (indent-region (region-beginning) (region-end))
          (message "Indented selected region."))
      (progn
        (indent-buffer)
        (message "Indented buffer.")))))

;;;###autoload
(defun +my/untabify-buffer ()
  (interactive)
  (save-excursion
    (untabify (point-min) (point-max)) nil))

;;;###autoload
(defun +my/hidden-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))

;;;###autoload
(defun +my/remove-dos-eol ()
  "Replace DOS eolns CR LF with Unix eolns CR"
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil t) (replace-match "")))

;;;###autoload
(defun +my/insert-semicolon-at-the-end-of-this-line ()
  (interactive)
  (save-excursion
    (end-of-line)
    (insert ";")))

;;;###autoload
(defun +my/delete-semicolon-at-the-end-of-this-line ()
  (interactive)
  (save-excursion
    (end-of-line)
    (when (looking-back ";")
      (backward-char)
      (delete-char 1))))

;;;###autoload
(defun +my/check-large-buffer ()
  "Check if the buffer is large."
  (when (> (buffer-size) 1048576)       ; 1MB
    t))

;;;###autoload
(defun +my/find-file-check-make-large-file-read-only-hook ()
  "If a file is over a given size, make the buffer read only."
  (when (+my/check-large-buffer)
    (setq-local buffer-read-only t)
    (buffer-disable-undo)
    (fundamental-mode)))

;;;###autodef
(defun lsp! ()
  "Dispatch to call the currently used lsp client entrypoint"
  (interactive)
  (unless (+my/check-large-buffer)
    (if (modulep! :tools lsp +eglot)
        (eglot-ensure)
      (unless (bound-and-true-p lsp-mode)
        (lsp-deferred)))))

;;;###autodef
(defun +lsp/restart ()
  (interactive)
  (if (modulep! :tools lsp +eglot)
      (call-interactively 'eglot-reconnect)
    (call-interactively 'lsp-workspace-restart)))
#+end_src

*** git.el
#+begin_src emacs-lisp :tangle autoload/git.el :mkdirp yes
;;; autoload/git.el -*- lexical-binding: t; -*-

;;; Add support for Amazon code repos
;;;###autoload
(defun git-link-amazon-code (_hostname dirname filename branch commit start end)
  (require 's)
  (format "https://code.amazon.com/packages/%s/blobs/%s/--/%s"
          ;; The dirname here is user/repo-name. Just pick the repo-name.
          (nth 1 (s-split "/" dirname))
          (or commit branch)
          (concat filename
                  (when start
                    (concat "#"
                            (if end
                                (format "L%s-L%s" start end)
                              (format "L%s" start)))))))

;;;###autoload
(defun git-link-commit-amazon-code (_hostname dirname commit)
  (require 's)
  (format "https://code.amazon.com/packages/%s/commits/%s#"
          (nth 1 (s-split "/" dirname))
          commit))

;;;###autoload
(defun git-link-aws-codecommit (hostname dirname filename branch commit start end)
  (require 's)
  (format "https://console.aws.amazon.com/codesuite/codecommit/repositories/%s/browse/refs/heads/%s/--/%s?region=%s&lines=%s-%s"
          (nth 2 (s-split "\\/" dirname))
          (or branch commit)
          filename
          (nth 1 (s-split "\\." hostname))
          (or start "")
          (or end start "")))

;;;###autoload
(defun git-link-commit-aws-codecommit (hostname dirname commit)
  (require 's)
  (require 'magit-git)
  (format "https://console.aws.amazon.com/codesuite/codecommit/repositories/%s/commit/%s?region=%s"
          (nth 2 (s-split "\\/" dirname))
          (magit-rev-parse commit)
          (nth 1 (s-split "\\." hostname))))

;;;###autoload
(defun +vc/git-browse-commit (arg)
  "Open the website for the current version controlled file. Fallback to
repository root."
  (interactive "P")
  (require 'git-link)
  (let ((git-link-open-in-browser (not arg)))
    (git-link-commit (git-link--select-remote))))

;;;###autoload
(defun git-link-github-http (hostname dirname filename branch commit start end)
  (format "http://%s/%s/blob/%s/%s"
          hostname
          dirname
          (or branch commit)
          (concat filename
                  (when start
                    (concat "#"
                            (if end
                                (format "L%s-%s" start end)
                              (format "L%s" start)))))))

;;;###autoload
(defun git-link-commit-github-http (hostname dirname commit)
  (format "http://%s/%s/commit/%s"
          hostname
          dirname
          commit))

(defun magit-blame-get-hash ()
  "Code copied from magit-blame-copy-hash"
  (oref (magit-current-blame-chunk) orig-rev))

;;;###autoload
(defun magit-blame--git-link-commit (arg)
  "Git link commit go to current line's magit blame's hash"
  (interactive "P")
  (require 'git-link)
  (cl-letf (((symbol-function 'word-at-point)
             (symbol-function 'magit-blame-get-hash)))
    (let ((git-link-open-in-browser (not arg)))
      (git-link-commit (git-link--read-remote)))))


(defvar forge-show-all-issues-and-pullreqs t
  "If nil, only show issues and pullreqs assigned to me.")

;;;###autoload
(defun +my/forge-toggle-all-issues-and-pullreqs ()
  "Toggle the forge section which only shows the issues and pullreqs assigned to me."
  (interactive)
  (setq forge-insert-default '(forge-insert-pullreqs forge-insert-issues))
  (setq forge-insert-assigned '(forge-insert-assigned-pullreqs forge-insert-assigned-issues))
  (if forge-show-all-issues-and-pullreqs
      (progn
        (setq forge-show-all-issues-and-pullreqs nil)
        (remove-hook! 'magit-status-sections-hook #'forge-insert-issues nil t)
        (remove-hook! 'magit-status-sections-hook #'forge-insert-pullreqs nil t)
        (magit-add-section-hook 'magit-status-sections-hook 'forge-insert-assigned-pullreqs nil t)
        (magit-add-section-hook 'magit-status-sections-hook 'forge-insert-assigned-issues nil t))
    (progn
      (setq forge-show-all-issues-and-pullreqs t)
      (remove-hook! 'magit-status-sections-hook #'forge-insert-assigned-issues nil t)
      (remove-hook! 'magit-status-sections-hook #'forge-insert-assigned-pullreqs nil t)
      (magit-add-section-hook 'magit-status-sections-hook 'forge-insert-pullreqs nil t)
      (magit-add-section-hook 'magit-status-sections-hook 'forge-insert-issues nil t)))

  ;; refresh magit-status buffer
  (magit-refresh))
#+end_src

*** misc.el
#+begin_src emacs-lisp :tangle autoload/misc.el :mkdirp yes
;;; private/my/autoload/misc.el -*- lexical-binding: t; -*-

;;;###autoload
(defun yank-with-delete-region ()
  (interactive)
  (when (evil-visual-state-p)
    (delete-region (region-beginning) (region-end)))
  (yank))

;;;###autoload
(defun xterm-paste-with-delete-region (event)
  (interactive "e")
  (when (evil-visual-state-p)
    (delete-region (region-beginning) (region-end)))
  (xterm-paste event))

;;;###autoload
(defun doom/toggle-comment-region-or-line ()
  "Comments or uncomments the whole region or if no region is
selected, then the current line."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

;;;###autoload
(define-inline +my/prefix-M-x (prefix)
  (inline-quote
   (lambda () (interactive)
     (setq unread-command-events (string-to-list ,prefix))
     (call-interactively #'execute-extended-command))))

;;;###autoload
(define-inline +my/simulate-key (key)
  (inline-quote
   (lambda () (interactive)
     (setq prefix-arg current-prefix-arg)
     (setq unread-command-events (listify-key-sequence (read-kbd-macro ,key))))))

;;;###autoload
(defmacro make--shell (name ip &rest arglist)
  `(defun ,(intern (format "my-shell-%s" name)) ,arglist
     (interactive)
     (find-file ,(format "/sshx:%s:" ip))
     (vterm-toggle-cd)))

;;;###autoload
(defmacro make--ssh (name ip &rest arglist)
  `(defun ,(intern (format "my-ssh-%s" name)) ,arglist
     (interactive)
     (find-file ,(format "/sshx:%s:" ip))))


;;;###autoload
(defun +default/yank-project-name ()
  "Copy the current buffer's path to the kill ring."
  (interactive)
  (require 'f)
  (message "Copied project name to clipboard: %s"
           (kill-new (f-filename (doom-project-root)))))

;;;###autoload
(defun +default/search-project-with-hidden-files ()
  (interactive)
  (let ((counsel-rg-base-command "rg -zS --no-heading --line-number --color never --hidden %s . ")
        (consult-ripgrep-command (concat  "rg --null --line-buffered --color=ansi --max-columns=1000 "
                                          "--hidden --no-heading --line-number . -e ARG OPTS")))
    (+default/search-project)))

;;;###autoload
(defun +default/search-workspace (&optional arg)
  "Conduct a text search in files under the current folder.
If prefix ARG is set, prompt for a directory to search from."
  (interactive "P")
  (let ((default-directory
          (if arg
              (read-directory-name "Search Workspace: ")
            (expand-file-name (concat (doom-project-root) "/..")))))
    (call-interactively
     (cond ((modulep! :completion vertico) #'+vertico/project-search-from-cwd)
           ((modulep! :completion ivy)  #'+ivy/project-search-from-cwd)
           ((modulep! :completion helm) #'+helm/project-search-from-cwd)
           (#'rgrep)))))

;; TODO: Search with specific file types
;;;###autoload
;; (defun +ivy--counsel-file-jump-use-fd-rg-specific-files (args)
;;   "Change `counsel-file-jump' to use fd or ripgrep, if they are available."
;;   (cl-destructuring-bind (find-program . args)
;;       (cond ((executable-find doom-projectile-fd-binary)
;;              (cons doom-projectile-fd-binary (list "-t" "f" "-E" ".git" "-e" "py" "-e" "java"
;;                                                    "-e" "yaml" "-e" "md" "-e" "adoc")))
;;             ((executable-find "rg")
;;              (split-string (format counsel-rg-base-command "--files --no-messages") " " t))
;;             ((cons find-program args)))
;;     (unless (listp args)
;;       (user-error "`counsel-file-jump-args' is a list now, please customize accordingly."))
;;     (counsel--call
;;      (cons find-program args)
;;      (lambda ()
;;        (goto-char (point-min))
;;        (let ((offset (if (member find-program (list "rg" doom-projectile-fd-binary)) 0 2))
;;              files)
;;          (while (< (point) (point-max))
;;            (push (buffer-substring
;;                   (+ offset (line-beginning-position)) (line-end-position)) files)
;;            (forward-line 1))
;;          (nreverse files))))))

;;;###autoload
;; (defun +ivy/project-search-specific-files (&optional initial-input initial-directory)
;;   "Similar to counsel-file-jump"
;;   (interactive
;;    (list nil
;;          (when current-prefix-arg
;;            (counsel-read-directory-name "From directory: "))))
;;   (counsel-require-program find-program)
;;   (let ((default-directory (doom-project-root)))
;;     (ivy-read "Find file: "
;;               (+ivy--counsel-file-jump-use-fd-rg-specific-files counsel-file-jump-args)
;;               :matcher #'counsel--find-file-matcher
;;               :initial-input initial-input
;;               :action #'find-file
;;               :preselect (counsel--preselect-file)
;;               :require-match 'confirm-after-completion
;;               :history 'file-name-history
;;               :caller 'counsel-file-jump)))

;;;###autoload
(defvar +my/repo-root-list '("~" "~/Builds" "~/go/src" "~/Documents" "~/.config")
  "personal repo root to scan git projects")

;;;###autoload
(defvar +my/user-custom-repos '("/CCN_Tools/work/bstnnx_release/regression_test/"))

;;;###autoload
(defun update-projectile-known-projects ()
  (interactive)
  (require 'magit)
  (setq magit-repository-directories '(("~/Work" . 3)))
  ;; Workplace folder has some permission error on macos
  (let ((workspace-dir "~/Documents/"))
    (when (file-directory-p workspace-dir)
      (dolist (dir (directory-files workspace-dir t))
        (when (and
               (file-readable-p dir)
               (not (string-equal ".." (substring dir -2)))
               (not (string-equal "." (substring dir -1))))
          (appendq! magit-repository-directories `((,dir . 2)))))))
  (let (magit-repos
        magit-abs-repos
        (home (expand-file-name "~")))
    ;; append magit repos at root with depth 1
    (dolist (root +my/repo-root-list)
      (setq magit-abs-repos (append magit-abs-repos (magit-list-repos-1 root 1))))
    (setq magit-abs-repos (append magit-abs-repos (magit-list-repos)))

    ;; convert abs path to relative path (HOME)
    (dolist (repo magit-abs-repos)
      (push (concat "~/" (file-relative-name repo "~")) magit-repos))
    (setq projectile-known-projects magit-repos)
    (dolist (repo +my/user-custom-repos)
      (if (file-directory-p repo)
          (push repo projectile-known-projects)))))

;;;###autoload
(defun +my/evil-quick-replace (beg end )
  (interactive "r")
  (when (evil-visual-state-p)
    (evil-exit-visual-state)
    (let ((selection (replace-regexp-in-string "/" "\\/" (regexp-quote (buffer-substring-no-properties beg end)) t t)))
      (setq command-string (format "1,$s /%s/%s/g" selection selection))
      (minibuffer-with-setup-hook
          (lambda () (backward-char 2))
        (evil-ex command-string)))))

;;;###autoload
(defun +my/markdown-copy-fix ()
  (interactive)
  (let ((case-fold-search nil))
    (dolist (pair '(("<pre.*>" . "```python")
                    ("<\/pre>" . "```")
                    ("^> " . "")
                    ("^>" . "")
                    ("\\[<svg.*</svg>\\]([^)]*)" . "")
                    ("\\\\\\*" . "*")
                    ("\\\\\\#" . "#")
                    ))
      (goto-char (point-min))
      ;; if you need regexp, use search-forward-regexp
      (while (re-search-forward (car pair) nil t)
        (replace-match (cdr pair))))))


;;;###autoload
(defun iterm-open-new-tab (dir &optional args)
  (do-applescript
   (format
    "
    tell application \"/Applications/iTerm.app\"
        activate
        tell current window
            create tab with default profile
            tell the current session
                write text \"cd %s\"
            end tell
        end tell
    end tell
"
    dir)))

;; "http://xuchunyang.me/Opening-iTerm-From-an-Emacs-Buffer/"
;;;###autoload
(defun +my/iterm-shell-command (command &optional prefix)
  "cd to `default-directory' then run COMMAND in iTerm.
With PREFIX, cd to project root."
  (interactive (list (read-shell-command
                      "iTerm Shell Command: ")
                     current-prefix-arg))
  (let* ((dir (if prefix (doom-project-root)
                default-directory))
         ;; if COMMAND is empty, just change directory
         (cmd (format "cd %s ;%s" dir command)))
    (do-applescript
     (format
      "
  tell application \"iTerm2\"
       activate
       set _session to current session of current window
       tell _session
            set command to get the clipboard
            write text \"%s\"
       end tell
  end tell
  " cmd))))

;; https://github.com/syohex/emacs-browser-refresh/blob/master/browser-refresh.el
;;;###autoload
(defun +my/browser-refresh--chrome-applescript ()
  (interactive)
  (do-applescript
   (format
    "
  tell application \"Google Chrome\"
    set winref to a reference to (first window whose title does not start with \"Developer Tools - \")
    set winref's index to 1
    reload active tab of winref
  end tell
" )))

;;;###autoload
(defun +my/window-focus-default-browser ()
  (cond
   ((executable-find "launch-browser") (shell-command "launch-browser"))
   (IS-MAC (shell-command "open -a \"/Applications/Google Chrome.app\""))
   (IS-LINUX (shell-command "wmctrl -a \"Google Chrome\""))))

;;;###autoload
(defun imenu-comments ()
  "Imenu display comments."
  (interactive)
  (require 'evil-nerd-commenter)
  (let* ((imenu-create-index-function 'evilnc-imenu-create-index-function))
    (cond ((modulep! :completion vertico)   (consult-imenu))
          ((modulep! :completion ivy)       (counsel-imenu)))))


;; if the first line is too long, enable fundamental by default
;;;###autoload
(defun get-nth-line-length (n)
  "Length of the Nth line."
  (save-excursion
    (goto-char (point-min))
    (if (zerop (forward-line (1- n)))
        (- (line-end-position)
           (line-beginning-position)))))

;;;###autoload
(defun +my/check-minified-file ()
  (and
   (not (when (buffer-file-name)
          (member (file-name-extension (buffer-file-name))
                  '("org" "md" "markdown" "txt" "rtf"))))
   (cl-loop for i from 1 to (min 30 (count-lines (point-min) (point-max)))
            if (> (get-nth-line-length i) 1000)
            return t
            finally return nil)))


;;;###autoload
(defmacro measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (message "%.06f" (float-time (time-since time)))))

;;; Scratch frame
(defvar +my--scratch-frame nil)

(defun cleanup-scratch-frame (frame)
  (when (eq frame +my--scratch-frame)
    (with-selected-frame frame
      (setq doom-fallback-buffer-name (frame-parameter frame 'old-fallback-buffer))
      (remove-hook 'delete-frame-functions #'cleanup-scratch-frame))))

;;;###autoload
(defun open-scratch-frame (&optional fn)
  "Opens the org-capture window in a floating frame that cleans itself up once
you're done. This can be called from an external shell script."
  (interactive)
  (let* ((frame-title-format "")
         (preframe (cl-loop for frame in (frame-list)
                            if (equal (frame-parameter frame 'name) "scratch")
                            return frame))
         (frame (unless preframe
                  (make-frame `((name . "scratch")
                                (width . 120)
                                (height . 24)
                                (transient . t)
                                (internal-border-width . 10)
                                (left-fringe . 0)
                                (right-fringe . 0)
                                (undecorated . t)
                                ,(if IS-LINUX '(display . ":0")))))))
    (setq +my--scratch-frame (or frame posframe))
    (select-frame-set-input-focus +my--scratch-frame)
    (when frame
      (with-selected-frame frame
        (if fn
            (call-interactively fn)
          (with-current-buffer (switch-to-buffer "*scratch*")
            ;; (text-scale-set 2)
            (when (eq major-mode 'fundamental-mode)
              (emacs-lisp-mode)))
          (redisplay)
          (set-frame-parameter frame 'old-fallback-buffer doom-fallback-buffer-name)
          (setq doom-fallback-buffer-name "*scratch*")
          (add-hook 'delete-frame-functions #'cleanup-scratch-frame))))))

;;;###autoload
(defun +default/yank-filename  ()
  "Copy and show the file name of the current buffer."
  (interactive)
  (if-let (file-name (file-name-nondirectory (buffer-file-name)))
      (progn
        (kill-new file-name)
        (message "%s" file-name))
    (message "WARNING: Current buffer is not attached to a file!")))

;;;###autoload
(defun remove-nth-element (nth list)
  (if (zerop nth) (cdr list)
    (let ((last (nthcdr (1- nth) list)))
      (setcdr last (cddr last))
      list)))

#+end_src

*** os.el
#+begin_src emacs-lisp :tangle autoload/os.el :mkdirp yes
;;; ~/.doom.d/autoload/os.el -*- lexical-binding: t; -*-

;; Copied from https://github.com/emacsorphanage/osx-trash/blob/master/osx-trash.el
(defconst os--trash-pkg-file
  (expand-file-name (if load-in-progress load-file-name (buffer-file-name)))
  "The absolute path to this file.")

(defconst os--trash-pkg-dir
  (file-name-directory os--trash-pkg-file)
  "The absolute path to the directory of this package.")

(defun os--trash-move-file-to-trash (file-name)
  "Move FILE-NAME to trash.

Try to call the `trash' utility first"
  (let ((file-name (expand-file-name file-name)))
    (with-temp-buffer
      (let ((retcode (call-process "trash" nil t nil file-name)))
        (unless (equal retcode 0)
          (error "Failed to trash %S: %S" file-name (buffer-string)))))))

;;;###autoload
(defun os--trash-setup ()
  "Provide trash support for OS X.

Provide `system-move-file-to-trash' as an alias for
`os--trash-move-file-to-trash'.

Note that you still need to set `delete-by-moving-to-trash' to a
non-nil value to enable trashing for file operations."
  (when (not (fboundp 'system-move-file-to-trash))
    (defalias 'system-move-file-to-trash
      'os--trash-move-file-to-trash)))

;;;###autoload
(defun +macos-open-with (&optional app-name path)
  "Send PATH to APP-NAME on OSX."
  (interactive)
  (let* ((path (expand-file-name
                (replace-regexp-in-string
                 "'" "\\'"
                 (or path (if (derived-mode-p 'dired-mode)
                              (dired-get-file-for-visit)
                            (buffer-file-name)))
                 nil t)))
         (command (format "open %s"
                          (if app-name
                              (format "-a %s '%s'" (shell-quote-argument app-name) path)
                            (format "'%s'" path)))))
    (message "Running: %s" command)
    (shell-command command)))

;;;###autoload
(defmacro +macos--open-with (id &optional app dir)
  `(defun ,(intern (format "+macos/%s" id)) ()
     (interactive)
     (+macos-open-with ,app ,dir)))

;;;###autoload
(defun +shell-open-with (&optional app-name args container app-window-name)
  "Open shell application."
  (interactive)
  (let* ((process-connection-type nil))
    (if (string= "" app-window-name) (setq app-window-name app-name))
    (if container
        (setq command (format "docker exec --user user %s %s %s" container app-name args))
      (setq command (format "%s %s" app-name args)))
    (async-shell-command-no-window command)
    (message command)
    (when IS-LINUX
      (shell-command (concat "wmctrl -a \"" app-window-name "\" ")))))

;;;###autoload
(defun notify-current-line-number ()
  (alert (concat "line number " (number-to-string (line-number-at-pos))) :severity 'low))

;;;###autoload
(defmacro +shell--open-with (id &optional app args)
  `(defun ,(intern (format "+shell/%s" id)) ()
     (interactive)
     (+shell-open-with ,app ,args)
     (notify-current-line-number)))

;;;###autoload
(defmacro +docker--open-with (id &optional app args container app-window-name)
  `(defun ,(intern (format "+docker/%s" id)) ()
     (interactive)
     (+shell-open-with ,app ,args ,container ,app-window-name)
     (notify-current-line-number)))

;;;###autoload
(when IS-MAC
  (defvar alacritty-bin "/Applications/Alacritty.app/Contents/MacOS/alacritty"
    "Alacritty terminal binary localtion.")
  (defvar iterm-bin "/Applications/iTerm.app/Contents/MacOS/iTerm2"
    "iTerm2 terminal binary localtion.")

  (defun +macos/reveal-in-terminal ()
    (interactive)
    (cond
     ((executable-find alacritty-bin)
      (+shell-open-with alacritty-bin (concat "--working-directory='" default-directory"'")))
     ((executable-find iterm-bin)
      (iterm-open-new-tab default-directory))))
  (defun +macos/reveal-project-in-terminal ()
    (interactive)
    (cond
     ((executable-find alacritty-bin)
      (+shell-open-with alacritty-bin (concat "--working-directory='" (or (doom-project-root) default-directory)"'")))
     ((executable-find iterm-bin)
      (iterm-open-new-tab (or (doom-project-root) default-directory))))))

#+end_src

*** prog.el
#+begin_src emacs-lisp :tangle autoload/prog.el :mkdirp yes
;;; ~/.doom.d/autoload/prog.el -*- lexical-binding: t; -*-

(defun my/realgud-eval-nth-name-forward (n)
  (interactive "p")
  (save-excursion
    (let (name)
      (while (and (> n 0) (< (point) (point-max)))
        (let ((p (point)))
          (if (not (c-forward-name))
              (progn
                (c-forward-token-2)
                (when (= (point) p) (forward-char 1)))
            (setq name (buffer-substring-no-properties p (point)))
            (cl-decf n 1))))
      (when name
        (realgud:cmd-eval name)
        nil))))

(defun my/realgud-eval-nth-name-backward (n)
  (interactive "p")
  (save-excursion
    (let (name)
      (while (and (> n 0) (> (point) (point-min)))
        (let ((p (point)))
          (c-backward-token-2)
          (when (= (point) p) (backward-char 1))
          (setq p (point))
          (when (c-forward-name)
            (setq name (buffer-substring-no-properties p (point)))
            (goto-char p)
            (cl-decf n 1))))
      (when name
        (realgud:cmd-eval name)
        nil))))

(defun my/realgud-eval-region-or-word-at-point ()
  (interactive)
  (when-let*
      ((cmdbuf (realgud-get-cmdbuf))
       (process (get-buffer-process cmdbuf))
       (expr
        (if (evil-visual-state-p)
            (let ((range (evil-visual-range)))
              (buffer-substring-no-properties (evil-range-beginning range)
                                              (evil-range-end range)))
          (word-at-point)
          )))
    (with-current-buffer cmdbuf
      (setq realgud:process-filter-save (process-filter process))
      (set-process-filter process 'realgud:eval-process-output))
    (realgud:cmd-eval expr)
    ))

(defun +my//realtime-elisp-doc-function ()
  (-when-let* ((w (selected-window))
               (s (intern-soft (current-word))))
    (describe-symbol s)
    (select-window w)))

;;;###autoload
(defun +my/realtime-elisp-doc ()
  (interactive)
  (when (eq major-mode 'emacs-lisp-mode)
    (if (advice-function-member-p #'+my//realtime-elisp-doc-function eldoc-documentation-function)
        (remove-function (local 'eldoc-documentation-function) #'+my//realtime-elisp-doc-function)
      (add-function :after-while (local 'eldoc-documentation-function) #'+my//realtime-elisp-doc-function))))

;;;###autoload
(defun +my/realgud-eval-nth-name-forward (n)
  (interactive "p")
  (save-excursion
    (let (name)
      (while (and (> n 0) (< (point) (point-max)))
        (let ((p (point)))
          (if (not (c-forward-name))
              (progn
                (c-forward-token-2)
                (when (= (point) p) (forward-char 1)))
            (setq name (buffer-substring-no-properties p (point)))
            (cl-decf n 1))))
      (when name
        (realgud:cmd-eval name)))))

;;;###autoload
(defun +my/realgud-eval-nth-name-backward (n)
  (interactive "p")
  (save-excursion
    (let (name)
      (while (and (> n 0) (> (point) (point-min)))
        (let ((p (point)))
          (c-backward-token-2)
          (when (= (point) p) (backward-char 1))
          (setq p (point))
          (when (c-forward-name)
            (setq name (buffer-substring-no-properties p (point)))
            (goto-char p)
            (cl-decf n 1))))
      (when name
        (realgud:cmd-eval name)))))

;;;###autoload
(defun async-shell-command-no-window (command)
  "Requisite Documentation"
  (interactive)
  (let
      ((display-buffer-alist
        (list
         (cons
          "\\*Async Shell Command\\*.*"
          (cons #'display-buffer-no-window nil)))))
    (async-shell-command
     command nil nil)))

;;;###autoload
(defadvice async-shell-command-no-window (around auto-confirm compile activate)
  (cl-letf (((symbol-function 'yes-or-no-p) (lambda (&rest args) t))
            ((symbol-function 'y-or-n-p) (lambda (&rest args) t)))
    ad-do-it))

;;;###autoload
(defun display-which-function ()
  (interactive)
  (message (which-function)))

#+end_src

*** text.el
#+begin_src emacs-lisp :tangle autoload/text.el :mkdirp yes
;;; autoload/text.el -*- lexical-binding: t; -*-

(defun +my/markdown-highlight ()
  "Surround each line of the current REGION with a start/end tag."
  (interactive)
  (let ((delim "=="))
    (markdown--insert-common delim delim markdown-regex-bold 2 4 'markdown-bold-face t)))

;;;###autoload
(defun +my/markdown-highlight-using-html-mark ()
  "Surround each line of the current REGION with a start/end tag."
  (interactive)
  (require 'web-mode)
  (when mark-active
    (let (beg end line-beg line-end pos tag tag-start tag-end)
      (save-excursion
        (combine-after-change-calls
          (setq tag "mark"
                tag-start (concat "<" tag ">")
                tag-end (concat "</" tag ">")
                pos (point)
                beg (region-beginning)
                end (region-end)
                line-beg (web-mode-line-number beg)
                line-end (web-mode-line-number end))
          (goto-char end)
          (unless (bolp)
            (insert tag-end)
            (back-to-indentation)
            (when (> beg (point))
              (goto-char beg))
            (insert tag-start))
          (while (> line-end line-beg)
            (forward-line -1)
            (setq line-end (1- line-end))
            (unless (looking-at-p "[[:space:]]*$")
              (end-of-line)
              (insert tag-end)
              (back-to-indentation)
              (when (> beg (point))
                (goto-char beg))
              (insert tag-start))
            )                           ;while
          (deactivate-mark)
          )                             ;combine-after-change-calls
        )                               ;save-excursion
      )))

#+end_src

*** ui.el
#+begin_src emacs-lisp :tangle autoload/ui.el :mkdirp yes
;;; autoload/ui.el -*- lexical-binding: t; -*-

;;;###autoload
(defun toggle-display-line-numbers-type ()
  (interactive)
  (if display-line-numbers-type
      (setq display-line-numbers-type nil)
    (setq display-line-numbers-type t))
  (revert-buffer-no-confirm))

#+end_src

** modules
*** lazycat
**** autoload
#+begin_src emacs-lisp :tangle modules/private/lazycat/autoload/lazycat.el :mkdirp yes
;;; private/lazycat/autoload/lazycat.el -*- lexical-binding: t; -*-

;;;###autoload
(defun +my/search-project ()
  (interactive)
  (if current-prefix-arg
      (color-rg-search-project)
    (+default/search-project)))

#+end_src

**** config.el
#+begin_src emacs-lisp :tangle modules/private/lazycat/config.el :mkdirp yes
;;; private/lazycat/config.el -*- lexical-binding: t; -*-

(map! :leader
      :desc "Snails" :nmv "RET" #'snails
      (:prefix "s"
       :desc "Search project" "p" #'+my/search-project
       :desc "Search project customly" "P" #'color-rg-customized-search))

(set-popup-rules! '(("^\\*color-rg\\*$" :size 0.35)))

(use-package! color-rg
  :defer t
  :custom (color-rg-mac-load-path-from-shell nil)
  :commands color-rg-search-project
  :config
  ;; https://emacs.stackexchange.com/a/10588/22102
  (evil-make-overriding-map color-rg-mode-map 'normal)
  ;; force update evil keymaps after git-timemachine-mode loaded
  (add-hook 'color-rg-mode-hook #'evil-normalize-keymaps)

  (map! (:map color-rg-mode-map
         "j" nil "k" nil "l" nil "h" nil
         "C-k" #'color-rg-jump-prev-keyword
         "C-j" #'color-rg-jump-next-keyword
         :nv "gr" #'color-rg-rerun)
        (:map color-rg-mode-edit-map
         "C-c C-k" #'color-rg-quit))

  (custom-set-faces!
    `(color-rg-font-lock-match :foreground ,(doom-color 'red))
    `(color-rg-font-lock-header-line-text :foreground ,(doom-color 'dark-cyan))
    `(color-rg-font-lock-function-location :foreground ,(doom-color 'magenta))
    `(color-rg-font-lock-header-line-keyword :foreground ,(doom-color 'magenta))
    `(color-rg-font-lock-header-line-edit-mode :foreground ,(doom-color 'magenta))))


(when (display-graphic-p)
  (use-package! snails
    :defer t
    :custom (snails-use-exec-path-from-shell nil)
    :load-path  "~/.config/emacs/.local/straight/repos/snails"
    :commands snails
    :config
    (setq snails-input-buffer-text-scale 1)
    (set-evil-initial-state!
      '(snails-mode)
      'insert)
    (map!
     (:map snails-mode-map
      :nvi "C-g" #'snails-quit
      :nvi "ESC ESC ESC" #'snail-quit
      :nvi "C-n" #'snails-select-next-item
      :nvi "C-p" #'snails-select-prev-item
      :nvi "C-v" #'snails-select-next-backend
      :nvi "M-v" #'snails-select-prev-backend
      :nvi "RET" #'snails-candidate-do
      :nvi "C-RET" #'snails-candiate-alternate-do))
    )

  (use-package! fuz
    :defer t
    :config
    (unless (require 'fuz-core nil t)
      (fuz-build-and-load-dymod))))

#+end_src

**** packages.el
#+begin_src emacs-lisp :tangle modules/private/lazycat/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; private/lazycat/packages.el

(package! color-rg :recipe (:host github :repo "manateelazycat/color-rg"))
(package! snails :recipe (:host github :repo "manateelazycat/snails"))
(package! fuz :recipe (:host github :repo "rustify-emacs/fuz.el"))

#+end_src

*** my-checker
**** autoload
#+begin_src emacs-lisp :tangle modules/private/my-checker/autoload/checker.el :mkdirp yes
;;; private/my-checker/autoload/checker.el -*- lexical-binding: t; -*-

;;;###autoload
(defun reset-flycheck (&rest _)
  (flycheck-mode -1)
  (flycheck-mode +1))

;;;###autoload
(defun occur-non-ascii ()
  "Find any non-ascii characters in the current buffer."
  (interactive)
  (occur "[^[:ascii:]]"))

;;add count for chinese, mainly used for writing chinese blog post
;; http://kuanyui.github.io/2014/01/18/count-chinese-japanese-and-english-words-in-emacs/
(defvar wc-regexp-english-word
  "[a-zA-Z0-9-]+")


#+end_src

**** config.el
#+begin_src emacs-lisp :tangle modules/private/my-checker/config.el :mkdirp yes
;;; private/my-checker/config.el -*- lexical-binding: t; -*-

(if (modulep! :checkers syntax)
    (map! :leader
          (:prefix-map ("e" . "error")
           :desc "Next error"      "n" #'flycheck-next-error
           :desc "Previous error"  "p" #'flycheck-previous-error
           :desc "Explain error"   "e" #'flycheck-explain-error-at-point
           :desc "List errors"     "l" #'flycheck-list-errors
           :desc "Lsp list errors" "L" #'consult-lsp-diagnostics
           :desc "Verify setup"    "v" #'flycheck-verify-setup))
  (map! :leader
        (:prefix-map ("e" . "error")
         :desc "Next error"      "n" #'flymake-goto-next-error
         :desc "Previous error"  "p" #'flymake-goto-prev-error
         :desc "Explain error"   "e" #'flymake-show-diagnostic
         :desc "List errors"     "l" #'flymake-show-diagnostics-buffer
         :desc "Lsp list errors" "L" #'consult-flymake
         :desc "List project error" "P" #'flymake-show-project-diagnostics
         :desc "Verify setup"    "v" #'flymake-running-backends)))
(map! :leader
      (:prefix "c"
       :desc "Cspell check all changed files" "c" #'cspell-check-diff-from-HEAD
       :desc "Cspell check buffer"    "C" #'cspell-check-buffer))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FLYCHECK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar cspell-base-program "cspell")
(defvar cspell-config-file-path (concat "'" (expand-file-name  "~/.config/cspell/cspell.json") "'"))
(defvar cspell-args (string-join `("--config" ,cspell-config-file-path) " "))
(defun cspell-check-buffer ()
  (interactive)
  (if cspell-base-program
      (let* ((file-name (concat "'" (file-name-nondirectory (buffer-file-name)) "'"))
             (command (string-join `(,cspell-base-program ,cspell-args ,file-name) " ")))
        (compilation-start command 'grep-mode))
    (message "Cannot find cspell, please install with `npm install -g cspell`")
    ))

(defun cspell-check-diff-from-HEAD ()
  (interactive)
  (if cspell-base-program
      (let* ((default-directory (doom-project-root))
             (command (string-join `("git diff --name-only HEAD | xargs -I{}" ,cspell-base-program ,cspell-args "'{}'") " ")))
        (compilation-start command 'grep-mode))
    (message "Cannot find cspell, please install with `npm install -g cspell`")))

;; (use-package! wucuo
;;   :defer t
;;   :init
;;   (add-hook! (js2-mode rjsx-mode go-mode c-mode c++-mode) #'wucuo-start))


(after! flycheck
  (setq-default flycheck-disabled-checkers
                '(
                  typescript-tslint javascript-jshint handlebars
                  eglot json-jsonlist json-python-json
                  c/c++-clang c/c++-cppcheck c/c++-gcc c/c++-googlelint
                  python-mypy python-pylint python-pycompile
                  ;; Disable Perl for Coral Config file
                  perl
                  ))

  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")

  ;; ======================== JS & TS ========================
  ;; https://github.com/hlissner/doom-emacs/blob/c2f8476c8641fcc9a1371d873ed3b5924952a059/modules/lang/javascript/config.el#L109

  ;; ======================== CC ========================
  (require 'flycheck-google-cpplint)
  (setq flycheck-c/c++-googlelint-executable "cpplint")
  (flycheck-add-next-checker 'c/c++-gcc '(t . c/c++-googlelint))

  (setq flycheck-c/c++-gcc-executable "gcc-7"
        flycheck-gcc-include-path '("/usr/local/inclue"))

  (add-hook! c++-mode-hook
    (setq flycheck-gcc-language-standard "c++11"
          flycheck-clang-language-standard "c++11"))
  )

;; (defun disable-flycheck-mode ()
;;   (flycheck-mode -1))
;; (add-hook! (emacs-lisp-mode) 'disable-flycheck-mode)

#+end_src

**** packages.el
#+begin_src emacs-lisp :tangle modules/private/my-checker/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; private/my-checker/packages.el

;; (package! wucuo)
(when (modulep! :checkers syntax)
  (package! flycheck-google-cpplint :recipe (:host github :repo "flycheck/flycheck-google-cpplint")))

#+end_src

*** nano-emacs
**** config.el
#+begin_src emacs-lisp :tangle modules/private/nano-theme/config.el :mkdirp yes
;;; private/nano-theme/config.el -*- lexical-binding: t; -*-

;; https://github.com/skyler544/doom-nano-testing/blob/main/load-nano.el

; necessary for proper appearance of nano
(setq doom-theme 'nil)

(require 'nano-base-colors)
(require 'nano-faces)
(require 'nano-theme-light)
(require 'nano-theme)
(require 'nano-help)
(require 'nano-splash)
(require 'nano-modeline)
(require 'nano-layout)
(require 'nano-defaults)
(require 'nano-session)
(require 'nano-bindings)
;; (require 'nano-counsel)
;; (require 'nano-minibuffer)
;; (require 'nano-command)
(require 'nano-colors)

(nano-faces)
(nano-theme)

(setq display-line-numbers-type nil
      evil-default-cursor t
      custom-blue "#718591"
      custom-yellow "#BDA441")

; still haven't figured out what is up with point
; related to nano. this is a stopgap measure to
; get a decent looking cursor
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (set-cursor-color custom-blue))))
  (set-cursor-color custom-blue))

(defun set-yellow ()
  (interactive)
  (set-cursor-color custom-yellow))
(defun set-blue ()
  (interactive)
  (set-cursor-color custom-blue))

#+end_src

**** packages.el
#+begin_src emacs-lisp :tangle modules/private/nano-theme/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; private/nano-theme/packages.el

(package! nano-emacs :recipe (:host github :repo "rougier/nano-emacs"))

#+end_src

*** my-python
**** autoload
#+begin_src emacs-lisp :tangle modules/private/my-python/autoload/python.el :mkdirp yes
;;; ~/.doom.d/autoload/python.el -*- lexical-binding: t; -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;               Debugger              ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;###autoload
(defun +python/annotate-pdb ()
  "Highlight break point lines."
  (interactive)
  (highlight-lines-matching-regexp "breakpoint()" 'breakpoint-enabled)
  (highlight-lines-matching-regexp "import \\(pdb\\|ipdb\\|pudb\\|wdb\\)" 'breakpoint-enabled)
  (highlight-lines-matching-regexp "\\(pdb\\|ipdb\\|pudb\\|wdb\\).set_trace()" 'breakpoint-enabled)
  (highlight-lines-matching-regexp "trepan.api.debug()") 'breakpoint-enabled)

;;;###autoload
(defun +python/toggle-breakpoint ()
  "Add a break point, highlight it."
  (interactive)
  (let ((trace (cond ((executable-find "trepan3k") "import trepan.api; trepan.api.debug()")
                     ((executable-find "wdb") "import wdb; wdb.set_trace()")
                     ((executable-find "pudb") "import pudb; pudb.set_trace()")
                     ;; ((executable-find "ipdb") "import ipdb; ipdb.set_trace()")
                     ;; ((executable-find "ipdb3") "import ipdb; ipdb.set_trace()")
                     ((executable-find "pudb3") "import pudb; pu.db")
                     ;; ((executable-find "python3.7") "breakpoint()")
                     ;; ((executable-find "python3.8") "breakpoint()")
                     (t "import pdb; pdb.set_trace()")))
        (line (thing-at-point 'line)))
    (if (and line (string-match trace line))
        (kill-whole-line)
      (progn
        (back-to-indentation)
        (insert trace)
        (insert "\n")
        (python-indent-line))))
  (+python/annotate-pdb))

;;;###autoload
(defun +python/toggle-debugpy-lines ()
  "Add debugpy listen lines."
  (interactive)
  (progn
    (beginning-of-buffer)
    ;; 20,000 is roughly about 200 lines
    (if (re-search-forward "import debugpy" 20000 t)
        (progn
          (beginning-of-buffer)
          (let ((regexes '("import debugpy\n"
                           "debugpy.listen((\"0.0.0.0\", 5678))\n"
                           "debugpy.wait_for_client()\n"
                           )))
            (dolist (reg regexes)
              (if (re-search-forward reg 20000 t)
                  (replace-match "" nil nil)))))
      (insert
       "import debugpy
debugpy.listen((\"0.0.0.0\", 5678))
debugpy.wait_for_client()
"))))

;;;###autoload
(defun +python/toggle-default-breakpoint ()
  "Add a break point, highlight it."
  (interactive)
  (let ((trace (cond (t "import pdb; pdb.set_trace()")))
        (line (thing-at-point 'line)))
    (if (and line (string-match trace line))
        (kill-whole-line)
      (progn
        (back-to-indentation)
        (insert trace)
        (insert "\n")
        (python-indent-line))))
  (+python/annotate-pdb))

;;;###autoload
(defun +python/copy-pdb-breakpoint-of-current-line ()
  "Copy a pdb like breakpoint on the current line."
  (interactive)
  (kill-new
   (concat "b " (file-relative-name (buffer-file-name) (doom-project-root))
           ":" (number-to-string (line-number-at-pos)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;               Imports               ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;###autoload
(defun +python/autoflake-remove-imports ()
  "Remove unused imports."
  (interactive)
  (shell-command
   (concat "autoflake --in-place --remove-all-unused-imports " (buffer-file-name)))
  (revert-buffer-no-confirm))

;; Copy from https://github.com/Wilfred/pyimport/blob/master/pyimport.el
(defun pyimport--current-line ()
  "Return the whole line at point, excluding the trailing newline."
  (buffer-substring-no-properties (line-beginning-position) (line-end-position)))

(defun pyimport--last-line-p ()
  "Return non-nil if the current line is the last in the buffer."
  (looking-at (rx (0+ not-newline) buffer-end)))

(defun pyimport--in-string-p ()
  "Return non-nil if point is inside a string."
  (nth 3 (syntax-ppss)))

(defun pyimport--buffer-lines (buffer)
  "Return all the lines in BUFFER, ignoring lines that are within a string."
  (let (lines)
    (with-current-buffer buffer
      (save-excursion
        (goto-char (point-min))
        (while (not (eobp))
          (unless (pyimport--in-string-p)
            (push (pyimport--current-line) lines))
          (forward-line 1))))
    (nreverse lines)))

(defun pyimport--import-lines (buffer)
  "Return all the lines in this Python BUFFER that look like imports."
  (->> (pyimport--buffer-lines buffer)
       (--filter (string-match (rx (or (seq bol "from ")
                                       (seq bol "import "))) it))
       (--map (propertize it 'pyimport-path (buffer-name buffer)))))

(defmacro pyimport--for-each-line (&rest body)
  "Execute BODY for every line in the current buffer.
To terminate the loop early, throw 'break."
  (declare (indent 0))
  `(save-excursion
     (catch 'break
       (goto-char (point-min))
       (while (not (pyimport--last-line-p))
         ,@body
         (forward-line))
       ,@body)))

(defun pyimport--same-module (import1 import2)
  "Return t if both lines of Python imports are from the same module."
  (-let (((keyword1 mod1 ...) (s-split " " import1))
         ((keyword2 mod2 ...) (s-split " " import2)))
    (and (string= keyword1 "from")
         (string= keyword2 "from")
         (string= mod1 mod2))))

(defun pyimport--insert-from-symbol (symbol)
  "When point is a on an import line, add SYMBOL."
  ;; Assumes the current line is of the form 'from foo import bar, baz'.

  ;; Step past the 'from '.
  (goto-char (line-beginning-position))
  (while (not (looking-at "import "))
    (forward-char 1))
  (forward-char (length "import "))

  (insert
   (->> (delete-and-extract-region (point) (line-end-position))
        (s-split ", ")
        (cons symbol)
        (-sort #'string<)
        (-uniq)
        (s-join ", "))))

(defun pyimport--insert-import (line)
  "Insert LINE, a python import statement, in the current buffer."
  (let* ((current-lines (pyimport--import-lines (current-buffer)))
         (same-pkg-lines (--filter (pyimport--same-module it line) current-lines)))
    (if same-pkg-lines
        ;; Find the first matching line, and append there
        (pyimport--for-each-line
          (when (pyimport--same-module (pyimport--current-line) line)
            (-let [(_ _module _ name) (s-split " " line)]
              (pyimport--insert-from-symbol name))
            ;; Break from this loop.
            (throw 'break nil)))

      ;; We don't have any imports for this module yet, so just insert
      ;; LINE as-is.
      (save-excursion
        (goto-char (point-min))
        (let ((insert-pos (point)))
          (catch 'found
            ;; Find the first non-comment non-blank line.
            (dotimes (_ 30)
              (forward-line 1)
              (let* ((ppss (syntax-ppss))
                     ;; Since point is at the start of the line, we
                     ;; are outside single line comments or
                     ;; strings. However, we might be in a multiline
                     ;; comment.
                     (string-comment-p (nth 8 ppss)))
                (when (and (not (looking-at "\n"))
                           (not (looking-at "#"))
                           (not (looking-at "\""))
                           (not string-comment-p))
                  (setq insert-pos (point))
                  (throw 'found nil)))))
          (insert line "\n"))))))

(defvar +python/python-temp-import nil
  "Temporary import string.")

;;;###autoload
(defun +python/insert-temp-import ()
  "Insert temporary import string."
  (interactive)
  (require 'rx)
  (require 's)
  (require 'dash)
  (if +python/python-temp-import
      (pyimport--insert-import +python/python-temp-import)
    (message "Haven't copy the import...")))

;;;###autoload
(defun +python/yank-module-import ()
  "Copy the current module's name to the kill ring."
  (interactive)
  (if-let (import (string-join `("from"
                                 ,(replace-regexp-in-string
                                   "/" "\."
                                   (file-relative-name (or (file-name-sans-extension (buffer-file-name))
                                                           (bound-and-true-p list-buffers-directory))
                                                       (doom-project-root)))
                                 "import" ,(replace-regexp-in-string "\\..*" "" (which-function)))
                               " "))
      ;; (message (kill-new (abbreviate-file-name import)))
      (message (setq +python/python-temp-import import))
    (error "Couldn't find filename in current buffer")))

;;;###autoload
(defun +python/copy-pytest-cmd ()
  "Copy pytest cmd."
  (interactive)
  (message (kill-new
            (concat "pytest "
                    (file-relative-name (buffer-file-name) (doom-project-root))
                    "::"
                    (which-function)
                    ))))

;;;###autoload
(defun +python/copy-unittest-cmd ()
  "Copy pytest cmd."
  (interactive)
  (message (kill-new
            (concat "python "
                    (file-relative-name (buffer-file-name) (doom-project-root))
                    " "
                    (which-function)
                    ))))

;;;###autoload
(defun +python/copy-python-cmd ()
  "Copy pytest cmd."
  (interactive)
  (message (kill-new
            (concat "python3 " (file-relative-name (buffer-file-name) (doom-project-root))))))

;;;###autoload
(defun +python/copy-pudb-python-cmd ()
  "Copy pytest cmd."
  (interactive)
  (message (kill-new
            (concat "python3 -m pudb.run "
                    (file-relative-name (buffer-file-name) (doom-project-root))))))

;;;###autoload
(defun +python/copy-pudb-pytest-cmd ()
  "Copy pytest cmd."
  (interactive)
  (message (kill-new
            (concat "pytest --pdbcls pudb.debugger:Debugger --pdb --capture=no "
                    (file-relative-name (buffer-file-name) (doom-project-root))
                    "::"
                    (which-function)
                    ))))

#+end_src

**** config.el
#+begin_src emacs-lisp :tangle modules/private/my-python/config.el :mkdirp yes
;;; private/my-python/config.el -*- lexical-binding: t; -*-

(map!
 (:after python
  :localleader
  :map python-mode-map
  :desc "Insert breakpoint" "b" #'+python/toggle-breakpoint
  :desc "Insert default breakpoint" "B" #'+python/toggle-default-breakpoint
  :desc "Toggle debugpy lines" "d" #'+python/toggle-debugpy-lines
  (:prefix "t"
   :desc "Copy python breakpoint" "b" #'+python/copy-pdb-breakpoint-of-current-line
   :desc "Copy python cmd" "p" #'+python/copy-python-cmd
   :desc "Copy pytest cmd" "y" #'+python/copy-pytest-cmd
   :desc "Copy unittest cmd" "u" #'+python/copy-unittest-cmd)
  (:prefix ("i" . "Import")
   :desc "Remove unused impoorts" "r" #'+python/autoflake-remove-imports
   :desc "Isort buffer"    "s" #'python-isort-autosave-mode
   :desc "Insert copied import" "p" #'+python/insert-temp-import
   :desc "Copy module import " "i" #'+python/yank-module-import)
  (:prefix ("v" . "ENV")
   "c" #'conda-env-activate
   "C" #'conda-env-deactivate
   "v" #'poetry-venv-toggle
   "P" #'pyvenv-workon
   "p" #'pyvenv-activate))
 (:after pyenv-mode
  (:map pyenv-mode-map
   "C-c C-s" nil
   "C-c C-u" nil)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PYTHON
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! python
  (setq python-indent-offset 4
        python-shell-interpreter "python3"
        pippel-python-command "python3"
        importmagic-python-interpreter "python3"
        flycheck-python-pylint-executable "pylint"
        flycheck-python-flake8-executable "flake8")
  (when (file-exists-p! "~/.conda")
    (setq conda-env-home-directory (expand-file-name "~/.conda")))

  ;; if you use pyton2, then you could comment the following 2 lines
  ;; (setq python-shell-interpreter "python2"
  ;;       python-shell-interpreter-args "-i")
  )
(add-hook! 'python-mode-hook #'+python/annotate-pdb)

(after! lsp-pyls
  ;; disable live-mode for mypy
  (lsp-register-custom-settings `(("pyls.plugins.pyls_mypy.enabled" t)))
  (lsp-register-custom-settings `(("pyls.plugins.pyls_mypy.live_mode" t)))

  ;; ignore some linting info
  (setq lsp-pyls-plugins-pycodestyle-ignore  [ "E501" ]
        lsp-pyls-plugins-pylint-args [ "--errors-only" ]))

(after! lsp-pyright
  (setq lsp-pyright-python-executable-cmd "python3"))

(use-package! py-isort
  :defer t
  :init
  (defvar my-enable-isort-before-save t)
  (defun my-python-isrot-before-save ()
    (when my-enable-isort-before-save
      (py-isort-before-save)))
  (define-minor-mode python-isort-autosave-mode
    "Isort autosave mode."
    :lighter " Isort"
    :global nil
    (when (not (derived-mode-p 'python-mode))
      (error "Isort only works with Python buffers"))
    (if python-isort-autosave-mode
        (add-hook! 'before-save-hook :local #'my-python-isrot-before-save)
      (remove-hook! 'before-save-hook :local #'my-python-isrot-before-save)))

  ;; (add-hook! 'python-mode-hook #'python-isort-autosave-mode)
  )


;; (use-package! importmagic
;;   :defer t
;;   :hook (python-mode . importmagic-mode)
;;   :commands (importmagic-fix-imports importmagic-fix-symbol-at-point)
;;   :config
;;   (dolist (func '(importmagic-fix-imports importmagic-fix-symbol-at-point))
;;     (advice-add func :before #'revert-buffer-no-confirm)))


(after! pipenv
  (setq pipenv-with-projectile t)
  ;; Override pipenv--clean-response to trim color codes
  (defun pipenv--clean-response (response)
    "Clean up RESPONSE from shell command."
    (replace-regexp-in-string "\n\\[0m$" "" (s-chomp response)))

  ;; restart flycheck-mode after env activate and deactivate
  (dolist (func '(pipenv-activate pipenv-deactivate))
    (progn
      (when (modulep! :checkers syntax)
        (advice-add func :after #'reset-flycheck))
      (advice-add func :after #'+lsp/restart))))


(after! conda
  ;; restart flycheck-mode after env activate and deactivate
  (dolist (func '(conda-env-activate conda-env-deactivate))
    (progn
      (when (modulep! :checkers syntax)
        (advice-add func :after #'reset-flycheck))
      (advice-add func :after #'+lsp/restart))))

(after! poetry
  (remove-hook 'python-mode-hook #'poetry-tracking-mode)
  (dolist (func '(poetry-venv-workon poetry-venv-deactivate))
    (progn
      (when (modulep! :checkers syntax)
        (advice-add func :after #'reset-flycheck))
      (advice-add func :after #'+lsp/restart))))

;; For pytest-mode
(set-evil-initial-state! '(comint-mode) 'normal)


(after! dap-python
  (setq dap-python-executable "python3"
        dap-python-debugger 'debugpy))

#+end_src

**** packages.el
#+begin_src emacs-lisp :tangle modules/private/my-python/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; private/my-python/packages.el

;; (package! importmagic)
(package! py-isort)

#+end_src

** config.el
*** imprting custom config files
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

(load! "+os")
(load! "+git")
(load! "+misc")
(load! "+text")
(load! "+prog")
(load! "+ui")
(load! "+keys")
(cond
  ((modulep! :tools lsp +eglot) (load! "+eglot"))
  ((modulep! :tools lsp) (load! "+lsp")))
#+end_src

*** Name and email
#+begin_src emacs-lisp :tangle config.el
(setq user-full-name "Mohamed Tarek"
      user-mail-address "mohamed96tarek@hotmail.com")
#+end_src

*** misc config
#+begin_src emacs-lisp :tangle config.el

(setq org-directory "~/org/")

(setq native-comp-jit-compilation t)

(setq doom-scratch-buffer-major-mode 'emacs-lisp-mode
      confirm-kill-emacs nil)

;; Delete the selection when pasting
(delete-selection-mode 1)

;; disable risky local variables warning
(advice-add 'risky-local-variable-p :override #'ignore)

(add-hook! 'find-file-hook #'+my/find-file-check-make-large-file-read-only-hook)

(setq clipetty-tmux-ssh-tty "tmux show-environment -g SSH_TTY")

;; check minified-file
(add-to-list 'magic-mode-alist (cons #'+my/check-minified-file 'fundamental-mode))

(set-popup-rules! '(("^\\*helpful" :size 0.35)
                    ("^\\*Ibuffer\\*$" :size 0.35)
                    ("^\\*info.*" :size 80 :side right)
                    ("^\\*Man.*" :size 80 :side right)
                    ("^\\*keycast.*" :size 50 :side right)
                    ("^\\*Customize" :actions display-buffer)
                    ("^\\*edit-indirect" :size 0.6)
                    ("^\\*YASnippet Tables\\*$" :size 0.35)
                    ("^\\*grep\\*$" :size 0.35)
                    ("^\\*pytest\\*" :size 0.35)
                    ("^\\*Anaconda\\*$" :size 0.35)
                    ("\\*.*server log\\*$" :side top :size 0.20 :select nil)
                    ((lambda (buf _) (with-current-buffer buf (eq major-mode 'forge-topic-mode))) :size 0.35)
                    ))

;; Manually edit .local/custom.el will break doom updates
(when (file-directory-p custom-file)
  (message (concat "Please delete " custom-file ". And customization in config.el and +ui.el.")))

(custom-set-variables
 '(warning-suppress-log-types '((lsp-mode) (iedit)))
 '(warning-suppress-types '((iedit))))

;; Load system profile for different machines and work config
(dolist (config '("~/.config/doom/local.el"))
  (let ((config-file (file-truename config)))
    (when (file-exists-p config-file)
      (load-file config-file))))
#+end_src

** +ui.el
*** Setting fonts
#+begin_src emacs-lisp :tangle +ui.el
;;; private/my/+ui.el -*- lexical-binding: t; -*-

(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 13 :weight 'semibold)
      doom-variable-pitch-font (font-spec :family "Rubik" :size 15 :weight 'medium)
      doom-symbol-font (font-spec :family "FiraCode Nerd Font" :size 13))

(setq display-line-numbers-type 'relative)

(setq-default fill-column 120
              delete-trailing-lines t)
#+end_src

*** Emacs Window Setup
#+begin_src emacs-lisp :tangle +ui.el

(set-frame-parameter nil 'alpha-background 80)
(add-to-list 'default-frame-alist '(alpha-background . 80)) ; For all new frames henceforth
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

*** Theme
#+begin_src emacs-lisp :tangle +ui.el

(setq doom-theme 'doom-gruvbox)
#+end_src

*** UI config
#+begin_src emacs-lisp :tangle +ui.el

(setq evil-emacs-state-cursor `(box ,(doom-color 'violet)))

;; Update window divider in terminal
;; https://www.reddit.com/r/emacs/comments/3u0d0u/how_do_i_make_the_vertical_window_divider_more/
(unless (display-graphic-p)
  (setq evil-insert-state-cursor 'box)
  (defun my-change-window-divider ()
    (ignore-errors
      (let ((display-table (or buffer-display-table standard-display-table)))
        (set-display-table-slot display-table 5 ?â”‚)
        ;; (set-window-display-table (selected-window) display-table)
        )))
  (add-hook 'window-configuration-change-hook #'my-change-window-divider))

(after! doom-modeline
  (setq doom-modeline-buffer-file-name-style 'truncate-with-project
        doom-modeline-major-mode-icon t
        ;; My mac vsplit screen won't fit
        doom-modeline-window-width-limit (- fill-column 10)))

(setq +workspaces-on-switch-project-behavior t)

(remove-hook 'doom-init-ui-hook #'blink-cursor-mode)

(defface breakpoint-enabled '((t)) "Breakpoint face.")

;; Faces need to postpone renderring
;; custom-set-faces! doesn't work properly when you switch doom themes
(custom-theme-set-faces! doom-theme
  `(hl-line :background ,(doom-color 'bg-alt)) ; sometimes ranger doesn't show hl-line color
  `(doom-modeline-debug-visual :background ,(doom-blend 'red 'base0 0.3))
  `(mode-line :background ,(doom-blend 'dark-blue 'base0  0.6))
  `(mode-line-inactive :background ,(doom-color 'bg-alt))
  `(vertical-border :foreground ,(doom-color 'bg-alt))
  '(font-lock-doc-face :italic t)
  '(font-lock-comment-face :italic t)
  '(font-lock-builtin-face :italic t)
  '(font-lock-type-face :italic t)
  `(show-paren-match :background ,(doom-blend 'teal 'base0 0.6) :foreground ,(doom-color 'base1))
  '(tide-hl-identifier-face :inherit 'lsp-face-highlight-read)
  `(breakpoint-enabled :background ,(doom-color 'red) :foreground ,(doom-lighten (doom-color 'red) 0.5))
  `(dap-ui-pending-breakpoint-face :background ,(doom-color 'red) :foreground "white")
  `(dap-ui-verified-breakpoint-face :background ,(doom-blend 'red 'base0 0.2))
  `(lsp-ui-peek-highlight :foreground ,(doom-color 'blue))
  `(ivy-posframe-border :background ,(doom-color 'blue))
  `(magit-diff-file-heading :background ,(doom-blend 'blue 'base0 0.2))
  `(magit-diff-file-heading-highlight :background ,(doom-blend 'blue 'base0 0.5))
  '(markdown-header-face-1 :inherit 'org-level-1)
  '(markdown-header-face-2 :inherit 'org-level-2)
  '(markdown-header-face-3 :inherit 'org-level-3)
  `(web-mode-jsx-depth-1-face :background ,(doom-blend 'teal 'base0 0.1))
  `(web-mode-jsx-depth-2-face :background ,(doom-blend 'teal 'base0 0.2))
  `(web-mode-jsx-depth-3-face :background ,(doom-blend 'teal 'base0 0.3))
  `(web-mode-jsx-depth-4-face :background ,(doom-blend 'teal 'base0 0.4))
  `(web-mode-jsx-depth-5-face :background ,(doom-blend 'teal 'base0 0.5))
  `(flyspell-incorrect :underline ,(doom-color 'red))
  `(flyspell-duplicate :underline ,(doom-color 'orange))
  `(flymake-warning :underline (:style wave :color ,(doom-color 'yellow)))
  `(flycheck-warning :underline (:style wave :color ,(doom-color 'yellow)))
  `(flycheck-error :underline (:style wave :color ,(doom-color 'red)))
  `(flycheck-info :underline (:style wave :color ,(doom-color 'green)))
  `(ein:cell-input-area :background ,(doom-blend 'red 'base0 0.15))
  `(ein:cell-input-prompt :background ,(doom-color 'red) :foreground ,(doom-color 'base0) :bold t)
  `(font-lock-comment-face :foreground ,(doom-color 'blue))
  `(font-lock-doc-face :foreground ,(doom-color 'blue)))

(custom-theme-set-faces! 'doom-gruvbox
  ;; ediff
  `(ediff-current-diff-A :foreground ,(doom-color 'red)   :background ,(doom-blend 'red 'base0 0.2))
  `(ediff-current-diff-B :foreground ,(doom-color 'green) :background ,(doom-blend 'green 'base0 0.2))
  `(ediff-current-diff-C :foreground ,(doom-color 'blue)  :background ,(doom-blend 'blue 'base0 0.2))
  `(ediff-current-diff-Ancestor :foreground ,(doom-color 'teal)  :background ,(doom-blend 'teal 'base0 0.2))
  )

;; for terminal
(unless (display-graphic-p)
  (custom-set-faces!
    `(mode-line-inactive :background ,(doom-darken (doom-color 'bg-alt) 0.05) :foreground ,(doom-color 'fg))))

;; (when IS-MAC
;;   ;; enable ligatures support
;;   ;; details here: https://github.com/tonsky/FiraCode/wiki/Emacs-instructions
;;   (ignore-errors
;;     (mac-auto-operator-composition-mode)))


(after! ibuffer
  (setq-hook! 'ibuffer-hook ibuffer-formats
              '((mark modified read-only locked " "
                 (name 50 18 :left :elide)
                 " "
                 (size 9 -1 :right)
                 " "
                 (mode 16 16 :left :elide)
                 " " filename-and-process)
                (mark " "
                      (name 16 -1)
                      " " filename))))

(use-package! all-the-icons-ibuffer
  :after ibuffer
  :init (all-the-icons-ibuffer-mode 1)
  )

(add-hook! 'process-menu-mode-hook
  (setq-local tabulated-list-format [("Process" 30 t)
                                     ("PID"      7 t)
                                     ("Status"   7 t)
                                     ("Buffer"  15 t)
                                     ("TTY"     12 t)
                                     ("Command"  0 t)]))

(after! centered-window
  (setq cwm-centered-window-width 160))
#+end_src

** +text.el
*** text
#+begin_src emacs-lisp :tangle +text.el
;;;  -*- lexical-binding: t; -*-

(after! text-mode
  (setq-hook! 'text-mode-hook truncate-lines nil tab-width 2))
#+end_src

*** ORG
#+begin_src emacs-lisp :tangle +text.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ORG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq org-directory (expand-file-name "~/Documents/notes")
      org-roam-directory (expand-file-name "roam" org-directory)
      org-agenda-files (list org-directory)
      org-ellipsis " â–¼ "
      org-hide-emphasis-markers t
      org-babel-python-command "python3"
      ;; The standard unicode characters are usually misaligned depending on the
      ;; font. This bugs me. Markdown #-marks for headlines are more elegant.
      org-bullets-bullet-list '("#"))

(after! org-roam
  (make-directory (concat org-directory "/roam") 'parents))

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;; :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(after! (:and org-agenda all-the-icons)
  ;; https://old.reddit.com/r/emacs/comments/hnf3cw/my_orgmode_agenda_much_better_now_with_category/
  (setq org-agenda-category-icon-alist
        `(("work" ,(list (all-the-icons-material "work")) nil nil :ascent center)
          ("chore" ,(list (all-the-icons-material "home")) nil nil :ascent center)
          ("events" ,(list (all-the-icons-material "event")) nil nil :ascent center)
          ("todo" ,(list (all-the-icons-material "check_box")) nil nil :ascent center)
          ("solution" ,(list (all-the-icons-material "done")) nil nil :ascent center)
          ("birthday" ,(list (all-the-icons-material "cake")) nil nil :ascent center)
          ("anniversary" ,(list (all-the-icons-material "favorite")) nil nil :ascent center))))

(after! org
  (setq org-capture-templates
        '(("t" "Personal todo" entry
           (file+headline +org-capture-todo-file "Inbox")
           "* TODO %?\n%i" :prepend t :kill-buffer t)
          ("n" "Personal notes" entry
           (file+headline +org-capture-notes-file "Inbox")
           "* %u %?\n%i" :prepend t :kill-buffer t)

          ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
          ;; {todo,notes,changelog}.org file is found in a parent directory.
          ("p" "Templates for projects")
          ("pt" "Project todo" entry       ; {project-root}/todo.org
           (file+headline +org-capture-project-todo-file "Inbox")
           "* TODO %?\n%i" :prepend t :kill-buffer t)
          ("pn" "Project notes" entry      ; {project-root}/notes.org
           (file+headline +org-capture-project-notes-file "Inbox")
           "* TODO %?\n%i" :prepend t :kill-buffer t)
          ("pc" "Project changelog" entry  ; {project-root}/changelog.org
           (file+headline +org-capture-project-notes-file "Unreleased")
           "* TODO %?\n%i" :prepend t :kill-buffer t)))

  (setq org-log-into-drawer "LOGBOOK")


  ;; Schedule/deadline popup with default time
  (defvar org-default-time "10:30"
    "The default time for deadlines.")

  (defun advise-org-default-time (func arg &optional time)
    (let ((old-time (symbol-function #'org-read-date)))
      (cl-letf (((symbol-function #'org-read-date)
                 #'(lambda (&optional a b c d default-time f g)
                     (let ((default-time (or default-time
                                             org-default-time)))
                       (apply old-time a b c d f default-time g)
                       ))))
        (apply func arg time))))

  (advice-add #'org-deadline :around #'advise-org-default-time)
  (advice-add #'org-schedule :around #'advise-org-default-time))


(after! ox-pandoc
  (setq org-pandoc-options-for-revealjs '((variable . "highlight-theme=github")
                                          (variable . "theme=white"))))

(use-package! pomm
  :defer t
  :commands (pomm pomm-third-time)
  :config
  (setq pomm-work-period 55
        pomm-long-break-period 25
        pomm-short-break-period 5
        dotty-asset-dir (expand-file-name "~/.config/dotty/assets/"))
  (when (file-exists-p! dotty-asset-dir)
    ;; Use custom audio files and remove tick audio
    (setq pomm-audio-files
          `((work . ,(concat dotty-asset-dir "sounds/Glass.wav"))
            (short-break . ,(concat dotty-asset-dir "sounds/Glass.wav"))
            (long-break . ,(concat dotty-asset-dir "sounds/Glass.wav"))
            (stop . ,(concat dotty-asset-dir "sounds/Blow.wav")))))

  (setq alert-default-style (if IS-MAC 'osx-notifier 'libnotify)
        pomm-audio-enabled t)
  (pomm-mode-line-mode))

(use-package! org-appear
  :defer t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t
        org-appear-autosubmarkers t
        org-appear-delay 0.3))

#+end_src

*** MARKDOWN
#+begin_src emacs-lisp :tangle +text.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MARKDOWN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq markdown-fontify-code-blocks-natively t)

(remove-hook 'text-mode-hook #'auto-fill-mode)

(use-package! edit-indirect :defer t)

(after! markdown-mode
  (advice-add #'markdown-follow-thing-at-point :around #'doom-set-jump-a))

(use-package! md-roam
  :after org-roam
  :init
  (setq org-roam-file-extensions '("org" "md")) ; enable Org-roam for a markdown extension
  :config
  (md-roam-mode 1)
  (setq md-roam-file-extension "md")    ; default "md". Specify an extension such as "markdown"
  ;; remove @ citation
  (setq md-roam-regex-in-text-citation-2 "\\(?:[^[:alnum:]]\\|^\\)\\([-a-zA-Z0-9_+:]+\\)")
  (setq org-roam-capture-templates
        '(("m" "Markdown" plain "" :target
           (file+head "${title}.md"
                      "---\ntitle: ${title}\nid: %<%Y-%m-%dT%H%M%S>\ncategory: \n---\n")
           :unnarrowed t)
          ;; ("d" "default" plain "%?" :target
          ;;  (file+head "${slug}.org" "#+title: ${title}\n")
          ;;  :unnarrowed t)
          )
        )
  )

#+end_src

*** OTHERS
#+begin_src emacs-lisp :tangle +text.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OTHERS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! blog-admin
  :defer t
  :commands blog-admin-start
  :hook (blog-admin-backend-after-new-post . find-file)
  :init
  ;; do your configuration here
  (setq blog-admin-backend-type 'hexo
        blog-admin-backend-path "~/Documents/hexo_blog"
        blog-admin-backend-new-post-in-drafts t
        blog-admin-backend-new-post-with-same-name-dir nil
        blog-admin-backend-hexo-config-file "_config.yml"))


(use-package! tldr
  :defer t
  :config
  (setq tldr-directory-path (concat doom-etc-dir "tldr/"))
  (set-popup-rule! "^\\*tldr\\*" :side 'right :select t :quit t)
  )

(use-package! link-hint :defer t)

(use-package! symbol-overlay :defer t)

(after! so-long
  (setq so-long-target-modes (delete 'text-mode so-long-target-modes)))


(use-package! adoc-mode
  :defer t
  :init
  (add-to-list 'auto-mode-alist (cons "\\.adoc\\'" 'adoc-mode)))

#+end_src

** +prog.el
*** MISC
#+begin_src emacs-lisp :tangle +prog.el
;;; ~/.doom.d/+prog.el -*- lexical-binding: t; -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MISC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! format-all
  :hook (emacs-lisp-mode . format-all-mode)
  :defer t)


(use-package! which-func
  :defer t
  :commands which-function)


(after! company
  ;; (setq company-idle-delay 0.2)
  (setq company-format-margin-function #'company-detect-icons-margin))


(use-package! graphql-mode
  :defer t
  :init
  (add-to-list 'auto-mode-alist '("\\.graphqls\\'" . graphql-mode)))


(use-package! protobuf-mode
  :defer t)


(use-package! gn-mode
  :defer t
  :init
  (add-to-list 'auto-mode-alist '("\\.gni?\\'" . gn-mode)))
#+end_src

*** CC
#+begin_src emacs-lisp :tangle +prog.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! bazel-mode
  :defer t)

(add-to-list 'auto-mode-alist '("\\.inl\\'" . +cc-c-c++-objc-mode))
(add-to-list 'auto-mode-alist '("\\.inc\\'" . +cc-c-c++-objc-mode))

(defun +cc/copy-lldb-breakpoint-of-current-line ()
  "Copy a pdb like breakpoint on the current line."
  (interactive)
  (kill-new
   (concat "b " (file-name-nondirectory (buffer-file-name))
           " : " (number-to-string (line-number-at-pos)))))
#+end_src

*** JS, WEB
#+begin_src emacs-lisp :tangle +prog.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; JS, WEB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-hook! '(web-mode-hook html-mode-hook) (setq-local format-all-formatters '(("HTML" prettier))))
(add-hook! 'typescript-mode-hook (setq-local format-all-formatters '(("TypeScript" prettier))))
(add-hook! 'rjsx-mode-hook (setq-local format-all-formatters '(("JavaScript" prettier))))

(after! web-mode
  (web-mode-toggle-current-element-highlight)
  (web-mode-dom-errors-show))
#+end_src

*** JAVA
#+begin_src emacs-lisp :tangle +prog.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; JAVA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; (set-formatter! 'google-java-format "google-java-format -" :modes '(java-mode))
#+end_src

*** DEBUG & RUN
#+begin_src emacs-lisp :tangle +prog.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DEBUG & RUN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! quickrun
  (quickrun-add-command "c++/c1z"
    '((:command . "clang++")
      (:exec    . ("%c -std=c++1z %o -o %e %s"
                   "%e %a"))
      (:remove  . ("%e")))
    :default "c++"))


(after! realgud (advice-remove #'realgud:terminate #'+debugger--cleanup-after-realgud-a))


(when (modulep! :tools debugger)
  (defun +my/dap-start ()
    (interactive)
    (dap-mode 1)
    (call-interactively #'dap-debug))

  (defun +my/dap-delete-output-and-stderr-buffers ()
    (doom/kill-matching-buffers " stderr*" (buffer-list))
    (doom/kill-matching-buffers " out*" (buffer-list)))

  ;; (add-hook! dap-mode-hook ((tooltip-mode 1)))

  (after! dap-mode
    ;; (setq dap-auto-configure-features '(sessions locals expressions controls tooltip))
    (setq lsp-enable-dap-auto-configure nil)

    ;; use M-u to exit dap-hydra
    (after! dap-hydra
      (defhydra+ dap-hydra () ("M-u" nil)))

    ;; Toggle dap-hydra whenever breakpoint is triggered
    ;; (add-hook 'dap-stopped-hook
    ;;           (lambda (arg) (call-interactively #'dap-hydra)))
    )

  (map! :leader
        (:prefix ("d" . "debug")
         :desc "Start debugger" "d" #'+my/dap-start
         :desc "Start last debugger" "D" #'dap-debug-last
         :desc "Remove DAP outpput buffers" "K" #'+my/dap-delete-output-and-stderr-buffers
         (:prefix ("b" . "breakpoint")
                  "b" #'dap-breakpoint-toggle
                  "c" #'dap-breakpoint-condition)
         "B" #'dap-ui-breakpoints
         "h" #'dap-hydra
         "r" #'dap-debug-restart
         "l" #'dap-ui-locals
         "e" #'dap-ui-expressions
         "a" #'dap-ui-expressions-add
         "R" #'dap-ui-expressions-remove
         "f" #'dap-switch-stack-frame
         "q" #'dap-disconnect
         "s" #'dap-ui-sessions
         "k" #'dap-delete-session
         "K" #'dap-delete-all-sessions
         "S" #'realgud-short-key-mode)))
#+end_src

*** LANGUAGE CUSTOMIZATION
#+begin_src emacs-lisp :tangle +prog.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LANGUAGE CUSTOMIZATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-generic-mode sxhkd-mode
  '(?#)
  '("alt" "Escape" "super" "bspc" "ctrl" "space" "shift") nil
  '("sxhkdrc") nil
  "Simple mode for sxhkdrc files.")
#+end_src

** +os.el
*** MACOS
#+begin_src emacs-lisp :tangle +os.el
;;; ~/.doom.d/+os.el -*- lexical-binding: t; -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MACOS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun +os/read-apps ()
  "Applications collection used for `+shell--open-with' method.
To add executable: Idea -> Tools -> Create Command Line Launcher"
  (let ((shell-apps '("idea" "code -g" "pycharm" "clion")))
    (completing-read "Select Applications:" shell-apps)))

(defun get-filename-with-line-number ()
  (concat (concat (buffer-file-name) ":")
          (number-to-string (line-number-at-pos))))

(when IS-MAC
  (+macos--open-with reveal-in-finder nil default-directory)
  (+macos--open-with reveal-project-in-finder nil
                     (or (doom-project-root) default-directory))

  (+shell--open-with reveal-in-apps (+os/read-apps)
                     (string-join `("'" ,(get-filename-with-line-number) "'")))
  (+shell--open-with reveal-project-in-apps (+os/read-apps)
                     (or (doom-project-root) default-directory))

  (+macos--open-with reveal-in-typora "typora" buffer-file-name))
#+end_src

*** LINUX
#+begin_src emacs-lisp :tangle +os.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LINUX
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when IS-LINUX
  (defvar linux-terminal (cond ((executable-find "kitty") "kitty")
                               ((executable-find "konsole") "konsole")))

  (defun linux-terminal-args (dir)
    (cond ((executable-find "kitty") (concat "--working-directory='" dir "'"))
          ((executable-find "konsole") (concat "--workdir='" dir "'"))))


  (defvar linux-finder (cond ((executable-find "xdg-open") "xdg-open")
                             ((executable-find "gvfs-open") "gvfs-open")))

  (+shell--open-with open-in-default-program linux-finder buffer-file-name)

  (+shell--open-with reveal-in-finder linux-finder default-directory)
  (+shell--open-with reveal-project-in-finder linux-finder
                     (or (doom-project-root) default-directory))

  (+shell--open-with reveal-in-apps (+os/read-apps)
                     (string-join `("'" ,(buffer-file-name) "'")))
  (+shell--open-with reveal-project-in-apps (+os/read-apps)
                     (or (doom-project-root) default-directory))

  (+shell--open-with reveal-in-terminal linux-terminal (linux-terminal-args default-directory))
  (+shell--open-with reveal-project-in-terminal linux-terminal
                     (linux-terminal-args (or (doom-project-root) default-directory))))
#+end_src

*** TRASH
#+begin_src emacs-lisp :tangle +os.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TRASH
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; delete to trash
(setq delete-by-moving-to-trash t)

;; using trash over rm
(when (executable-find "trash")
  (os--trash-setup))
#+end_src

** +misc.el
*** use chrome to browse
#+begin_src emacs-lisp :tangle +misc.el
;;; ~/.doom.d/+misc.el -*- lexical-binding: t; -*-

;; Use chrome to browse
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program
      (cond
       ;; https://github.com/ztlevi/dotty-config/blob/main/bin/launch-browser
       ((executable-find "launch-browser"  "launch-browser"))
       ((executable-find "google-chrome-stable") "google-chrome-stable")
       ((executable-find "/usr/bin/google-chrome-stable") "/usr/bin/google-chrome-stable")
       ((executable-find "google-chrome") "google-chrome")))
#+end_src

*** Spell dict file
#+begin_src emacs-lisp :tangle +misc.el

;; Set personal ispell dictionary file
(when (file-exists-p (expand-file-name "~/.aspell.en.pws"))
  (setq ispell-personal-dictionary (expand-file-name "~/.aspell.en.pws")))
#+end_src

*** Screenshot
#+begin_src emacs-lisp :tangle +misc.el

(use-package! screenshot
  :defer t)
#+end_src

*** Centaur-tabs
#+begin_src emacs-lisp :tangle +misc.el

(after! centaur-tabs
  (centaur-tabs-group-by-projectile-project))
#+end_src

*** INPUT METHOD
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; INPUT METHOD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! rime
  :defer t
  :custom
  (rime-user-data-dir (expand-file-name "~/.config/fcitx/emacs-rime"))
  (default-input-method "rime")
  (rime-show-candidate 'posframe)
  (rime-disable-predicates
   '(rime-predicate-evil-mode-p
     rime-predicate-after-alphabet-char-p
     rime-predicate-prog-in-code-p))
  (rime-inline-ascii-trigger 'shift-l)
  :bind
  ;; C-\ to toggle-input-method
  ;; C-` to toggle
  ;; , and . to page up and down
  (:map rime-mode-map
        ;; open rime menu
        ("C-`" . 'rime-send-keybinding))
  (:map rime-active-mode-map
        ("C-j" . 'rime-inline-ascii))
  :config
  (custom-set-faces!
    `(rime-default-face :background ,(doom-blend 'blue 'base0 0.15)))

  (when IS-MAC
    (setq rime-librime-root "~/.config/fcitx/librime/dist"))

  ;; Set Nixos env
  (when (and IS-LINUX (executable-find "nix"))
    (setq rime-emacs-module-header-root
          (concat (shell-command-to-string "nix eval --raw 'nixpkgs#emacs.outPath'") "/include")
          rime-librime-root
          (shell-command-to-string "nix eval --raw 'nixpkgs#librime.outPath'")
          rime-share-data-dir
          (concat (shell-command-to-string "nix eval --raw 'nixpkgs#brise.outPath'") "/share/rime-data"))))
#+end_src

*** LOG
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LOG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! keycast
  :defer t)
#+end_src

*** SSH
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SSH
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! ssh-deploy
  (setq ssh-deploy-automatically-detect-remote-changes 1))
#+end_src

*** NAVIGATION
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; NAVIGATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq evil-cross-lines t
      evil-split-window-below t
      evil-vsplit-window-right t
      ;; Implicit /g flag on evil ex substitution, because I less often want the
      ;; default behavior.
      evil-ex-substitute-global t)

(after! evil
  (evil-define-text-object evil-inner-buffer (count &optional beg end type)
    (list (point-min) (point-max)))
  (define-key evil-inner-text-objects-map "g" 'evil-inner-buffer))


(after! evil-snipe
  (setq evil-snipe-scope 'buffer
        evil-snipe-repeat-scope 'buffer)
  (push 'prodigy-mode evil-snipe-disabled-modes))


;; This package provides the g~ operator to transform CamelCase words into snake_case. You can customize the binding.
;; Try using g~io
(use-package! evil-string-inflection :after evil)

#+end_src

*** TMUX
#+begin_src emacs-lisp :tangle +misc.el

;; (use-package! tmux-pane
;;   :unless (display-graphic-p)
;;   :defer t
;;   :config
;;   (defvar my-tmux-pane-mode-map
;;     (let ((map (make-sparse-keymap)))
;;       (define-key map (kbd "C-t k")
;;         (lambda () (interactive) (tmux-pane--windmove "up"  "-U")))
;;       (define-key map (kbd "C-t j")
;;         (lambda () (interactive) (tmux-pane--windmove "down"  "-D")))
;;       (define-key map (kbd "C-t h")
;;         (lambda () (interactive) (tmux-pane--windmove "left" "-L")))
;;       (define-key map (kbd "C-t l")
;;         (lambda () (interactive) (tmux-pane--windmove "right" "-R")))
;;       (define-key map (kbd "C-t C-k")
;;         (lambda () (interactive) (tmux-pane--windmove "up"  "-U")))
;;       (define-key map (kbd "C-t C-j")
;;         (lambda () (interactive) (tmux-pane--windmove "down"  "-D")))
;;       (define-key map (kbd "C-t C-h")
;;         (lambda () (interactive) (tmux-pane--windmove "left" "-L")))
;;       (define-key map (kbd "C-t C-l")
;;         (lambda () (interactive) (tmux-pane--windmove "right" "-R")))
;;       map))
;;
;;   (define-minor-mode my-tmux-pane-mode
;;     "Seamlessly navigate between tmux pane and emacs window"
;;     :init-value nil
;;     :global t
;;     :keymap 'my-tmux-pane-mode-map)
;;
;;   :hook (after-init . my-tmux-pane-mode))
#+end_src

*** imenu-list
#+begin_src emacs-lisp :tangle +misc.el

(use-package! imenu-list
  :defer t
  :config
  (set-popup-rules! '(("^\\*Ilist\\*" :side right :size 40 :select t))))
#+end_src

*** better-jumper-post-jump-hook
#+begin_src emacs-lisp :tangle +misc.el

(add-hook! 'better-jumper-post-jump-hook #'recenter)
#+end_src

*** nav-flash
#+begin_src emacs-lisp :tangle +misc.el

(after! nav-flash
  (defun +advice/nav-flash-show (orig-fn &rest args)
    (ignore-errors (apply orig-fn args)))
  (advice-add 'nav-flash-show :around #'+advice/nav-flash-show))
#+end_src

*** dired
#+begin_src emacs-lisp :tangle +misc.el

;; Use ) key to toggle it
(after! dired
  ;; Rust version ls
  (when-let (exa (executable-find "exa"))
    (setq insert-directory-program exa)
    (setq dired-listing-switches (string-join (list "-ahl" "--group-directories-first") " ")))
  )
#+end_src

*** ranger
#+begin_src emacs-lisp :tangle +misc.el

(after! ranger
  (setq ranger-hide-cursor t
        ranger-show-hidden 'format
        ranger-deer-show-details nil)

  (defun ranger-copy-relative-path ()
    "Copy the current file path relative to `default-directory path."
    (interactive)
    (let ((current-prefix-arg 1))
      (call-interactively 'dired-copy-filename-as-kill)))

  (defun ranger-close-and-kill-inactive-buffers ()
    "ranger close current buffer and kill inactive ranger buffers"
    (interactive)
    (ranger-close)
    (ranger-kill-buffers-without-window))
  ;; do not kill buffer if exists in windows
  (defun ranger-disable ()
    "Interactively disable ranger-mode."
    (interactive)
    (ranger-revert)))
#+end_src

*** dash-docs
#+begin_src emacs-lisp :tangle +misc.el

(after! dash-docs
  (setq dash-docs-use-workaround-for-emacs-bug nil)
  (setq dash-docs-browser-func 'browse-url-generic))


(remove-hook! '(prog-mode-hook text-mode-hook conf-mode-hook) #'highlight-indent-guides-mode)
#+end_src

*** CITRE
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CITRE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! citre
  :defer t
  :init
  (require 'citre-config)
  ;; `doom-large-file-size-alist' controls when controls when Doom activates so-long-minor-mode
  ;; to cut down on features in large files
  ;; (setq large-file-warning-threshold nil)
  (map!
   :nv "gE"  #'citre-peek
   :nv "ge"  #'citre-jump
   :nv "gp"  #'citre-jump-back
   (:after citre-peek
           (:map citre-peek-keymap
                 "M-j" #'citre-peek-next-definition
                 "M-k" #'citre-peek-prev-definition
                 "M-S-j" #'citre-peek-next-line
                 "M-S-k" #'citre-peek-prev-line
                 "M-l" #'citre-peek-jump))
   :leader
   (:prefix "c"
    :desc "Citre update tags file" "t" #'citre-update-this-tags-file
    :desc "Citre edit tags file" "T" #'citre-edit-tags-file-recipe))
  :config
  ;; better jump set marker
  (advice-add #'citre-jump :around #'doom-set-jump-a)

  (remove-hook! 'citre-after-jump-hook #'citre-recenter-and-blink)
  (add-hook 'citre-after-jump-hook #'+nav-flash-blink-cursor-maybe-h)
  (setq
   ;; Set this if you use project management plugin like projectile.  It's
   ;; used for things like displaying paths relatively, see its docstring.
   citre-project-root-function #'projectile-project-root
   ;; Set this if you want to always use one location to create a tags file.
   citre-default-create-tags-file-location 'package-cache
   ;; See the "Create tags file" section above to know these options
   citre-use-project-root-when-creating-tags t
   citre-prompt-language-for-ctags-command t
   ;; By default, when you open any file, and a tags file can be found for it,
   ;; `citre-mode' is automatically enabled.  If you only want this to work for
   ;; certain modes (like `prog-mode'), set it like this.
   ;; citre-auto-enable-citre-mode-modes '(prog-mode)
   ))
#+end_src

*** TRANSLATE
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TRANSLATE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(use-package! go-translate
  :defer t
  :config
  (setq gts-translate-list '(("en" "ar-EG")))
  (setq gts-default-translator
        (gts-translator
         :picker (gts-prompt-picker)
         :engines (list (gts-google-engine) (gts-google-rpc-engine))
         :render (gts-buffer-render)))
  ;; For China user
  ;; (setq go-translate-base-url "https://translate.google.cn")
  )
#+end_src

*** QUICKRUN
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; QUICKRUN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! quickrun
  ;; quickrun--language-alist
  (when IS-LINUX
    (quickrun-set-default "c++" "c++/g++")))
#+end_src

*** PROJECTILE
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PROJECTILE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! projectile
  (setq compilation-read-command nil)   ; no prompt in projectile-compile-project
  ;; . -> Build
  (projectile-register-project-type 'cmake '("CMakeLists.txt")
                                    :configure "cmake %s"
                                    :compile "cmake --build build --config Debug --target all -j 14 --"
                                    :test "ctest -j14 -C Debug -T test --output-on-failure")

  ;; set projectile-known-projects after magit
  (after! magit
    (update-projectile-known-projects))
  )
#+end_src

*** COMPLETION
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; COMPLETION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when (modulep! :completion vertico)
  ;; Fix jump issue for vertico, https://github.com/hlissner/doom-emacs/issues/5386
  (dolist (func '(+default/search-project))
    (advice-add func :around #'doom-set-jump-a)))

(when (modulep! :completion ivy)
  (after! (:and ivy ivy-prescient)
    (setq ivy-prescient-retain-classic-highlighting t))

  (after! ivy-posframe
    (setq ivy-posframe-border-width 5)

    ;; Use minibuffer to display ivy functions
    (dolist (fn '(+ivy/switch-workspace-buffer
                  ivy-switch-buffer))
      (setf (alist-get fn ivy-posframe-display-functions-alist) #'ivy-display-function-fallback)))

  (after! ivy-rich
    (plist-put! ivy-rich-display-transformers-list
                'ivy-switch-buffer
                '(:columns
                  ((ivy-switch-buffer-transformer (:width 60))
                   (ivy-rich-switch-buffer-size (:width 7))
                   (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                   (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
                   (ivy-rich-switch-buffer-project (:width 15 :face success))
                   (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
                  :predicate
                  (lambda (cand) (get-buffer cand)))))

  (after! counsel
    ;; counsel-rg-base-command is configurable
    (setq counsel-find-file-ignore-regexp "\\(?:^[#.]\\)\\|\\(?:[#~]$\\)\\|\\(?:^Icon?\\)"
          counsel-describe-function-function 'helpful-callable
          counsel-describe-variable-function 'helpful-variable)))
#+end_src

*** ATOMIC CHROME
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC CHROME
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! atomic-chrome
  :defer 3
  :when (display-graphic-p)
  :preface
  (defun +my/atomic-chrome-server-running-p ()
    (cond ((executable-find "lsof")
           (zerop (call-process "lsof" nil nil nil "-i" ":64292")))
          ((executable-find "netstat")  ; Windows
           (zerop (call-process-shell-command "netstat -aon | grep 64292")))))
  :hook
  (atomic-chrome-edit-mode . +my/atomic-chrome-mode-setup)
  (atomic-chrome-edit-done . +my/window-focus-default-browser)
  :config
  (progn
    (setq atomic-chrome-buffer-open-style 'full) ;; or frame, split
    (setq atomic-chrome-url-major-mode-alist
          '(("github\\.com"        . gfm-mode)
            ("swagger"             . yaml-mode)
            ("emacs-china\\.org"   . gfm-mode)
            ("stackexchange\\.com" . gfm-mode)
            ("stackoverflow\\.com" . gfm-mode)
            ("discordapp\\.com"    . gfm-mode)
            ("coderpad\\.io"       . c++-mode)
            ;; jupyter notebook
            ("localhost\\:8888"    . python-mode)
            ("lintcode\\.com"      . python-mode)
            ("leetcode-cn\\.com"   . python-mode)
            ("leetcode\\.com"      . python-mode)))

    (defun +my/atomic-chrome-mode-setup ()
      (setq header-line-format
            (substitute-command-keys
             "Edit Chrome text area.  Finish \
`\\[atomic-chrome-close-current-buffer]'.")))

    (if (+my/atomic-chrome-server-running-p)
        (message "Can't start atomic-chrome server, because port 64292 is already used")
      (atomic-chrome-start-server))))
#+end_src

*** PRODIGY
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PRODIGY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! prodigy
  (set-evil-initial-state!
    '(prodigy-mode)
    'normal)

  (prodigy-define-tag
    :name 'jekyll
    :env '(("LANG" "en_US.UTF-8")
           ("LC_ALL" "en_US.UTF-8")))

  (prodigy-define-service
    :name "Hexo Blog Server"
    :command "hexo"
    :args '("server" "-p" "4000")
    :cwd blog-admin-backend-path
    :tags '(hexo server)
    :init (lambda () (browse-url "http://localhost:4000"))
    :kill-signal 'sigkill
    :kill-process-buffer-on-stop t)

  (prodigy-define-service
    :name "Hexo Blog Deploy"
    :command "hexo"
    :args '("deploy" "--generate")
    :cwd blog-admin-backend-path
    :tags '(hexo deploy)
    :kill-signal 'sigkill
    :kill-process-buffer-on-stop t)

  (defun refresh-chrome-current-tab (beg end length-before)
    (call-interactively '+my/browser-refresh--chrome-applescript))
  ;; add watch for prodigy-view-mode buffer change event
  (add-hook 'prodigy-view-mode-hook
            #'(lambda() (set (make-local-variable 'after-change-functions) #'refresh-chrome-current-tab))))
#+end_src

*** TERM
#+begin_src emacs-lisp :tangle +misc.el

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TERM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! eshell
  ;; eshell-mode imenu index
  (add-hook! 'eshell-mode-hook (setq-local imenu-generic-expression '(("Prompt" " Î» \\(.*\\)" 1))))

  (defun eshell/l (&rest args) (eshell/ls "-l" args))
  (defun eshell/e (file) (find-file file))
  (defun eshell/md (dir) (eshell/mkdir dir) (eshell/cd dir))
  (defun eshell/ft (&optional arg) (treemacs arg))

  (defun eshell/up (&optional pattern)
    (let ((p (locate-dominating-file
              (f-parent default-directory)
              (lambda (p)
                (if pattern
                    (string-match-p pattern (f-base p))
                  t)))
             ))
      (eshell/pushd p)))
  )


(after! term
  ;; term-mode imenu index
  (add-hook! 'term-mode-hook (setq-local imenu-generic-expression '(("Prompt" "âžœ\\(.*\\)" 1)))))
#+end_src

** +lsp.el
*** clangd
#+begin_src emacs-lisp :tangle +lsp.el
;;; +lsp.el -*- lexical-binding: t; -*-

(after! lsp-clangd
  (setq lsp-clients-clangd-args '("-j=3"
                                  "--background-index"
                                  "--clang-tidy"
                                  "--completion-style=detailed"
                                  "--header-insertion=never"
                                  "--header-insertion-decorators=0"))
  (set-lsp-priority! 'clangd 2)
  (after! dap-mode
    (require 'dap-codelldb)))
#+end_src

*** TypeScript
#+begin_src emacs-lisp :tangle +lsp.el

;; Typescript
(setq lsp-clients-typescript-init-opts
      '(:importModuleSpecifierPreference "relative"))
#+end_src

*** Java
#+begin_src emacs-lisp :tangle +lsp.el

;; Java
(after! lsp-java
  ;; eclipse.jdt.ls needs java 11
  (dolist (java_path '("/usr/lib/jvm/java-11-amazon-corretto.x86_64"
                       "/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home"))
    (if (file-directory-p java_path)
        (setq lsp-java-configuration-runtimes `[(:name "JavaSE-11"
                                                 :path ,java_path
                                                 :default t)]
              lsp-java-java-path (concat java_path "/bin/java")
              dap-java-java-command (concat java_path "/bin/java")))))
#+end_src

*** lsp-mode & lsp-ui
#+begin_src emacs-lisp :tangle +lsp.el

;; Use format-all by default
(setq +format-with-lsp nil)

(setq +lsp-prompt-to-install-server 'quiet)

(after! lsp-mode
  (setq lsp-log-io nil
        lsp-file-watch-threshold 4000
        lsp-headerline-breadcrumb-enable t
        lsp-headerline-breadcrumb-icons-enable nil
        lsp-headerline-breadcrumb-segments '(file symbols)
        lsp-imenu-index-symbol-kinds '(File Module Namespace Package Class Method Enum Interface
                                       Function Variable Constant Struct Event Operator TypeParameter)
        )
  (dolist (dir '("[/\\\\]\\.ccls-cache\\'"
                 "[/\\\\]\\.mypy_cache\\'"
                 "[/\\\\]\\.pytest_cache\\'"
                 "[/\\\\]\\.cache\\'"
                 "[/\\\\]\\.clwb\\'"
                 "[/\\\\]__pycache__\\'"
                 "[/\\\\]bazel-bin\\'"
                 "[/\\\\]bazel-code\\'"
                 "[/\\\\]bazel-genfiles\\'"
                 "[/\\\\]bazel-out\\'"
                 "[/\\\\]bazel-testlogs\\'"
                 "[/\\\\]third_party\\'"
                 "[/\\\\]third-party\\'"
                 "[/\\\\]buildtools\\'"
                 "[/\\\\]out\\'"
                 "[/\\\\]build\\'"
                 ))
    (push dir lsp-file-watch-ignored-directories))
  )

(after! lsp-ui
  (setq lsp-ui-doc-enable nil
        lsp-lens-enable nil
        lsp-ui-sideline-enable nil
        lsp-ui-doc-include-signature t
        lsp-ui-doc-max-height 15
        lsp-ui-doc-max-width 100))
#+end_src

*** lsp-docker
#+begin_src emacs-lisp :tangle +lsp.el

(use-package lsp-docker
  :when (not (modulep! :tools lsp +eglot))
  :defer t
  :commands lsp-docker-init-clients
  :config
  (defvar lsp-docker-client-packages
    '(lsp-css lsp-clients lsp-bash lsp-go lsp-pyls lsp-html lsp-typescript
      lsp-terraform lsp-cpp))

  (defvar lsp-docker-client-configs
    (list
     (list :server-id 'bash-ls :docker-server-id 'bashls-docker :server-command "bash-language-server start")
     (list :server-id 'clangd :docker-server-id 'clangd-docker :server-command "ccls")
     (list :server-id 'css-ls :docker-server-id 'cssls-docker :server-command "css-languageserver --stdio")
     (list :server-id 'dockerfile-ls :docker-server-id 'dockerfilels-docker :server-command "docker-langserver --stdio")
     (list :server-id 'gopls :docker-server-id 'gopls-docker :server-command "gopls")
     (list :server-id 'html-ls :docker-server-id 'htmls-docker :server-command "html-languageserver --stdio")
     (list :server-id 'pyls :docker-server-id 'pyls-docker :server-command "pyls")
     (list :server-id 'ts-ls :docker-server-id 'tsls-docker :server-command "typescript-language-server --stdio")))

  ;; (lsp-docker-init-clients
  ;;  :path-mappings `((,(file-truename "~/av") . "/code"))
  ;;  ;; :docker-image-id "my-lsp-docker-container:1.0"
  ;;  :client-packages '(lsp-pyls)
  ;;  :client-configs lsp-docker-client-configs)
  )
#+end_src

** +eglot.el
#+begin_src emacs-lisp :tangle +eglot.el
;;; +eglot.el -*- lexical-binding: t; -*-

(use-package! breadcrumb
  :defer t
  :when (modulep! :tools lsp +eglot)
  :hook
  (prog-mode . breadcrumb-local-mode)
  (text-mode . breadcrumb-local-mode)
  )

(after! eglot
  ;; set-eglot-client set the eglot-server-programs variable
  ;; CC
  (set-eglot-client! 'cc-mode '("clangd" "-j=3" "--clang-tidy"))

  ;; JS & TS
  ;; https://www.reddit.com/r/emacs/comments/11bqzvk/emacs29_and_eglot_inlay_hints/
  ;; https://github.com/microsoft/TypeScript/blob/main/src/server/protocol.ts#L3410-L3539
  (set-eglot-client! '(typescript-mode js-mode js-ts-mode tsx-ts-mode typescript-ts-mode)
                     '("typescript-language-server" "--stdio" :initializationOptions
                       (:preferences (:importModuleSpecifierPreference "relative"
                                      :allowRenameOfImportPath t
                                      ))))
  )

;; TODO: fix loading in doom https://discourse.doomemacs.org/t/error-when-loading-eglot-java/3923
(use-package! eglot-java
  :defer t
  :hook (java-mode . eglot-java-mode)
  )
#+end_src

* Modes Config
** Python Setup
#+begin_src emacs-lisp :tangle config.el

(setq lsp-pylsp-plugins-black-enabled nil)
(setq lsp-pylsp-plugins-flake8-enabled nil)
(setq lsp-pylsp-plugins-isort-enabled nil)
(setq lsp-pylsp-plugins-autopep8-enabled nil)
(setq lsp-pylsp-plugins-yapf-enabled nil)
(setq lsp-pylsp-plugins-ruff-enabled t)
(setq lsp-pylsp-plugins-ruff-lineLength 100)
(setq lsp-pylsp-plugins-ruff-format "I")
(setq lsp-pylsp-plugins-pyflakes-enabled nil)
(setq lsp-pylsp-plugins-pycodestyle-enabled nil)
(setq lsp-pylsp-plugins-pydocstyle-enabled nil)
(setq lsp-pylsp-plugins-mccabe-enabled nil)
(setq lsp-pylsp-plugins-mypy-enabled t)
#+end_src

** Web-mode Setup
#+begin_src emacs-lisp :tangle config.el

(after! web-mode
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . web-mode))
  (add-to-list 'web-mode-engines-alist '("\\.jinja2\\'" . "django"))
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-indentation t))
#+end_src

* Plugins Custom Configs
** evil-snipe
#+begin_src emacs-lisp :tangle config.el

(after! evil-snipe
  (setq evil-snipe-scope 'buffer
        evil-snipe-repeat-scope 'buffer)
  (push 'prodigy-mode evil-snipe-disabled-modes))
#+end_src

* GIT
#+begin_src emacs-lisp :tangle +git.el
;;; +git.el -*- lexical-binding: t; -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! git-link
  (setq git-link-open-in-browser nil
        git-link-use-commit t)

  (add-to-list 'git-link-remote-alist
               '("git\\.amazon\\.com" git-link-amazon-code))
  (add-to-list 'git-link-commit-remote-alist
               '("git\\.amazon\\.com" git-link-commit-amazon-code))
  (add-to-list 'git-link-remote-alist
               '("amazonaws\\.com" git-link-aws-codecommit))
  (add-to-list 'git-link-commit-remote-alist
               '("amazonaws\\.com" git-link-commit-aws-codecommit))

  ;; For some company still uses http git server
  ;; (add-to-list 'git-link-remote-alist
  ;;              '("git\\.dummy\\.com" git-link-github-http))
  ;; (add-to-list 'git-link-commit-remote-alist
  ;;              '("git\\.dummy\\.com" git-link-commit-github-http))

  ;; OVERRIDE
  (advice-add #'git-link--select-remote :override #'git-link--read-remote))


(after! magit
  (setq magit-save-repository-buffers nil
        git-commit-style-convention-checks nil
        magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)

  ;; Add git-credential-manager-core support
  (add-hook 'magit-process-prompt-functions
            'magit-process-git-credential-manager-core)

  ;; fix magit prompt for midway auth
  (appendq! magit-process-password-prompt-regexps '("Kerberos authentication failed.  Password:"))

  (magit-wip-after-apply-mode t)
  (magit-wip-before-change-mode t))


(after! forge
  ;; (push '("git.dummy.com" "git.dummy.com/api/v3" "git.dummy.com" forge-github-repository)
  ;;       forge-alist)

  ;; TEMP
  ;; (setq ghub-use-workaround-for-emacs-bug 'force)

  ;; Only show issues and pullreqs assigned to me. Toggle it off here.
  ;; (+my/forge-toggle-all-issues-and-pullreqs)
  )

(use-package! magit-delta
  :after magit
  :init
  (when (executable-find "delta")
    (add-hook! magit-mode #'magit-delta-mode))
  :config
  (setq magit-delta-default-light-theme "GitHub")
  )

(after! magit-todos
  (setq magit-todos-exclude-globs '("third-party/*" "third_party/*")))


;; magit-todos uses hl-todo-keywords
(custom-theme-set-faces! doom-theme
  `(hl-todo :foreground ,(doom-color 'bg)))
(after! hl-todo
  (setq hl-todo-color-background t
        hl-todo-keyword-faces
        `(("TODO"  . ,(doom-color 'orange))
          ("HACK"  . ,(doom-color 'orange))
          ("TEMP"  . ,(doom-color 'orange))
          ("DONE"  . ,(doom-color 'green))
          ("NOTE"  . ,(doom-color 'green))
          ("DONT"  . ,(doom-color 'red))
          ("DEBUG"  . ,(doom-color 'red))
          ("FAIL"  . ,(doom-color 'red))
          ("FIXME" . ,(doom-color 'red))
          ("XXX"   . ,(doom-color 'blue))
          ("XXXX"  . ,(doom-color 'blue)))))
#+end_src

* Bindings
#+begin_src emacs-lisp :tangle +keys.el
;;; private/my/+bindings.el -*- lexical-binding: t; -*-

(when IS-MAC (setq mac-command-modifier 'meta
                   mac-option-modifier  'alt))

;; Distinguish C-i from TAB
(when (display-graphic-p)
  (define-key input-decode-map "\C-i" [C-i])
  (map! "<C-i>" #'evil-jump-forward))


(map!
 ;; overrides other minor mode keymaps (just for non-evil)
 (:map override ;; general-override-mode-map
       "M-q"   (if (daemonp) #'delete-frame #'save-buffers-kill-terminal)
       "M-p"   (Î»! (projectile-invalidate-cache nil) (projectile-find-file))
       "M-y"   #'+default/yank-pop
       "C-]"   #'yas-expand
       "C-'"   #'toggle-input-method
       "<xterm-paste>" #'xterm-paste-with-delete-region
       "C-S-j" #'evil-scroll-line-down
       "C-S-k" #'evil-scroll-line-up
       "C-S-h" #'+tabs:previous-or-goto
       "C-S-l" #'+tabs:next-or-goto
       "C-S-n" #'dap-next
       "C-h"   #'evil-window-left
       "C-l"   #'evil-window-right
       "C-j"   #'evil-window-down
       "C-k"   #'evil-window-up
       "C-<left>" #'evil-window-increase-width
       "C-<right>" #'evil-window-decrease-width
       "C-<up>" #'evil-window-inease-width
       )

 :nv "gD" #'xref-find-definitions-other-window
 :nv "gr" #'+lookup/references
 ;; Conflict with vertico
 :g "C-SPC" nil :g "C-@" nil
 "M-`"   #'other-frame
 "C-M-o" #'other-frame
 ;; fix OS window/frame navigation/manipulation keys
 "M-w" #'delete-window
 "M-W" #'delete-frame
 "M-n" #'+default/new-buffer
 "M-N" #'make-frame
 "C-M-f" #'toggle-frame-fullscreen
 "M-t" #'transpose-words
 "M-i" #'display-which-function
 :gn "C-t" nil
 ;; Restore OS undo, save, copy, & paste keys (without cua-mode, because
 ;; it imposes some other functionality and overhead we don't need)
 "M-z" #'undo
 "M-Z" #'redo
 "M-c" (if (featurep 'evil) #'evil-yank #'copy-region-as-kill)
 "M-v" #'yank-with-delete-region
 "M-s" #'evil-write-all
 ;; frame-local font scaling
 "M-0" #'doom/reset-font-size
 "M-=" #'doom/increase-font-size
 "M--" #'doom/decrease-font-size
 ;; Conventional text-editing keys & motions
 "M-a" #'mark-whole-buffer
 :gni [M-RET]    #'+default/newline-below
 :gni [M-S-RET]  #'+default/newline-above
 :gi  [M-backspace] #'backward-kill-word
 :gi  [M-left]      #'backward-word
 :gi  [M-right]     #'forward-word
 ;; Searching
 (:when (modulep! :completion vertico)
   "M-f" #'consult-line
   "C-s" #'consult-line)
 (:when (modulep! :completion ivy)
   "M-f" #'swiper
   "C-s" #'swiper)
 "M-e"    #'persp-switch-to-buffer
 ;; "C-M-p"  #'+ivy/project-search-specific-files
 ;; Debug
 "M-u" #'dap-hydra
 ;; Help
 "M-h m" #'describe-mode
 "M-h C-k" #'find-function-on-key
 "M-h C-f" #'find-function-at-point
 "M-h C-v" #'find-variable-at-point
 ;; Comment
 "M-/" (cmd! (save-excursion (comment-line 1)))
 :n "M-/" #'evilnc-comment-or-uncomment-lines
 :v "M-/" #'evilnc-comment-operator
 ;; Others
 :m [tab] nil
 "C-M-\\" #'indent-region-or-buffer
 "M-m"    #'kmacro-call-macro
 )

(if (display-graphic-p)
    (map!
     ;; M-[ does not work in terminal
     "M-[" #'better-jumper-jump-backward
     "M-]" #'better-jumper-jump-forward)
  (map!
   :g "<mouse-4>" #'evil-scroll-line-up
   :g "<mouse-5>" #'evil-scroll-line-down
   ))

(map!
 ;; Unix text-editing keys & motions
 :gi "C-n" #'next-line
 :gi "C-p" #'previous-line
 :gi "C-b" #'backward-char
 :gi "C-f" #'forward-char
 :gi "C-k" #'kill-line
 :gi "C-d" #'delete-forward-char
 ;; For terminal specific keys
 :gnmvi "<deletechar>" (kbd "C-d")

 :v "C-r"   #'+my/evil-quick-replace
 :v "DEL" (kbd "\"_d")
 :v "<del>" (kbd "\"_d")
 :v "<backspace>" (kbd "\"_d")
 :nmv "-" #'better-jumper-jump-backward
 :nmv "=" #'better-jumper-jump-forward
 :gnmvi "C-e" #'doom/forward-to-last-non-comment-or-eol
 :gnmvi "C-a" #'doom/backward-to-bol-or-indent
 :gnmvi "M-." #'+lookup/definition

 (:prefix "C-x"
  :n "e"  #'pp-eval-last-sexp)
 (:prefix "C-c"
  :desc "Text properties at point" :nmv "f" (cmd! (message "%S" (text-properties-at (point))))))

;; leader/localleader is not compatible with :gnvmi
(map! :leader
      :desc "M-x" :nmv "SPC" #'execute-extended-command
      :desc "lispyville" :n "L" (+my/prefix-M-x "lispyville ")
      (:prefix-map ("a" . "app")
       "s" #'prodigy
       "b" #'blog-admin-start
       :desc "List process" "p" #'list-processes
       "x" #'align-regexp)
      (:prefix "b"                      ; buffer
               "m" #'list-bookmarks
               "h" #'+doom-dashboard/open
               "r" #'revert-buffer-no-confirm
               "R" #'reload-buffer-no-confirm
               "U" #'+my/untabify-buffer)
      (:prefix "c"                      ; code
       :desc "Format-all buffer"      "f" #'format-all-buffer
       :desc "Check grammar"          "g" #'langtool-check-buffer
       :desc "Done Check grammar"     "G" #'langtool-check-done
       (:when (modulep! :tools lsp +eglot)
         :desc "Eglot workspace restart"  "R" #'eglot-reconnect
         :desc "Eglot organize imports"   "I" #'eglot-code-action-organize-imports
         :desc "Eglot quickfix" "q" #'eglot-code-action-quickfix
         )
       (:when (not (modulep! :tools lsp +eglot))
         :desc "LSP organize imports"   "I" #'lsp-organize-imports
         :desc "LSP workspace restart"  "R" #'lsp-workspace-restart
         :desc "Treemacs references"    "D" #'lsp-treemacs-references))
      (:prefix "TAB"
       :desc "Switch workspace" "TAB" #'+workspace/switch-to
       :desc "Load worksapce from file" "L" #'+workspace/load
       :desc "Swap left"  "h" #'+workspace/swap-left
       :desc "Swap right" "l" #'+workspace/swap-right)
      (:prefix "f"                      ; file
       :desc "Yank filename" "n" #'+default/yank-filename
       :desc "Save all" "s" #'evil-write-all
       :desc "Deer"     "j" #'deer)
      (:prefix "n"                      ; notes
       :desc "Take screenshot" "p" #'screenshot
       (:prefix "r"
        :desc "show graph" "g" #'org-roam-ui-open))
      (:prefix "g"                      ; git
               "s" nil
               (:after smerge-mode
                :desc "Smerge" "s" smerge-basic-map)
               :desc "Browse file or region" "oo" #'git-link
               :desc "Magit browse commit"   "oc" #'+vc/git-browse-commit
               :desc "Magit wip worktree"    "w"  #'magit-wip-log-worktree
               :desc "M-x magit-*" "*" (+my/prefix-M-x "magit-"))
      (:prefix "h"                      ; help
               "C" #'helpful-command)
      (:prefix "w"
       :desc "Pin tab" "p" (Î»! (dotimes (n 50) (centaur-tabs-move-current-tab-to-left) nil)))
      (:prefix "o"                      ; open
       :desc "Kill ring"             "k" #'+default/yank-pop
       :desc "Imenu list"            "i" #'imenu-list
       :desc "Open link"             "x" #'link-hint-open-link
       :desc "Open link at point"    "X" #'link-hint-open-link-at-point
       :desc "Youdao dictionary"     "y" (if (display-graphic-p) #'youdao-dictionary-search-at-point-tooltip
                                           #'youdao-dictionary-search-at-point)
       :desc "Youdao play voice"     "Y" #'youdao-dictionary-play-voice-at-point
       :desc "Google Translate"      "g" #'go-translate
       :desc "Docker open apps"      ";" #'+docker/reveal-in-apps
       (:when IS-MAC
         :desc "Reveal in default program"  "f" #'+macos/open-in-default-program
         :desc "Reveal in Finder"           "o" #'+macos/reveal-in-finder
         :desc "Reveal project in Finder"   "O" #'+macos/reveal-project-in-finder
         :desc "Reveal in Terminal"         "t" #'+macos/reveal-in-terminal
         :desc "Reveal project in Terminal" "T" #'+macos/reveal-project-in-terminal
         :desc "Reveal file in Apps"        "," #'+shell/reveal-in-apps
         :desc "Reveal project in Apps"     "." #'+shell/reveal-project-in-apps)
       (:when IS-LINUX
         :desc "Reveal in default program"  "f" #'+shell/open-in-default-program
         :desc "Reveal in Finder"           "o" #'+shell/reveal-in-finder
         :desc "Reveal project in Finder"   "O" #'+shell/reveal-project-in-finder
         :desc "Reveal in Terminal"         "t" #'+shell/reveal-in-terminal
         :desc "Reveal project in Terminal" "T" #'+shell/reveal-project-in-terminal
         :desc "Reveal file in Apps"        "," #'+shell/reveal-in-apps
         :desc "Reveal project in Apps"     "." #'+shell/reveal-project-in-apps))
      (:prefix "i"                      ; insert
               "v" #'add-dir-local-variable
               "o" #'symbol-overlay-put
               "q" #'symbol-overlay-remove-all)
      (:prefix "p"                      ; project
       "n" #'+default/yank-project-name
       :desc "Switch projects" "p" (Î»! (update-projectile-known-projects) (projectile-switch-project))
       "*" (+my/prefix-M-x "projectile-")
       :desc "Update projectile list" "u" #'update-projectile-known-projects)
      (:prefix "e"                      ;error
               "d" #'posframe-delete-all)
      (:prefix "t"                      ; toggle
       :desc "Pomodoro timer" "t" #'pomm
       "c" #'rainbow-mode
       "C" #'centered-window-mode
       "d" #'toggle-debug-on-error
       "D" #'+my/realtime-elisp-doc
       "l" #'toggle-display-line-numbers-type
       "k" #'keycast-log-mode
       "T" #'toggle-truncate-lines
       "S" #'size-indication-mode
       "i" #'highlight-indent-guides-mode
       "v" #'visual-line-mode)
      (:prefix-map ("j" . "jump")
                   "j" #'avy-goto-char-timer
                   "l" #'avy-goto-line
                   "b" #'avy-pop-mark
                   "t" #'yas-describe-tables)
      (:prefix "s"                      ; search
       :desc "Comments" "c" #'imenu-comments
       :desc "M-x amazon-search-*" "a" (+my/prefix-M-x "amazon-search-wiki")
       :desc "Search Workspace" "w" #'+default/search-workspace
       :desc "Search Project (hidden)" "h" #'+default/search-project-with-hidden-files))

(map!
 (:map prog-mode-map
  :i "TAB" #'doom/dumb-indent
  :i "<backtab>" #'doom/dumb-dedent)
 (:after ranger
         (:map ranger-normal-mode-map
               "M-1" nil "M-2" nil "M-3" nil "M-4" nil "M-5" nil "M-6" nil "M-7" nil "M-8" nil "M-9" nil "M-0" nil
               "g"   nil
               "q" #'ranger-close-and-kill-inactive-buffers
               "f" #'find-file
               "F" #'dired-narrow                 ; use `; g` to quit dired-narrow
               "M-g" #'ranger-go
               "yr" #'ranger-copy-relative-path
               "C-TAB" #'ranger-next-tab
               "C-S-TAB" #'ranger-prev-tab
               "U" #'dired-unmark-all-files
               "u" #'dired-unmark
               "(" #'dired-hide-details-mode
               "+" #'dired-create-directory))
 (:after lispy
         (:map lispy-mode-map
          :i "_" #'special-lispy-different
          :i [remap kill-line] #'lispy-kill
          :i [remap delete-backward-char] #'lispy-delete-backward
          :n "M-r" nil :n "M-s" nil :n "M-v" nil
          :n "M-<left>" #'lispy-forward-barf-sexp
          :n "M-<right>" #'lispy-forward-slurp-sexp
          :n "C-M-<left>" #'lispy-backward-slurp-sexp
          :n "C-M-<right>" #'lispy-backward-barf-sexp))
 (:after lispyville
         (:map lispyville-mode-map
          :n "M-r" nil :n "M-s" nil :n "M-v" nil
          :n "C-M-r" #'lispy-raise-sexp
          :n "C-M-s" #'lispy-splice
          :n "M-V"   #'lispy-convolute-sexp
          :n "TAB" #'lispyville-prettify))
 (:after outline
  :map outline-mode-map
  :n "C-k" nil
  :n "C-j" nil)
 (:after elisp-mode
  :map emacs-lisp-mode-map
  :n "gh" #'helpful-at-point)
 (:after lsp-ui
  :map lsp-ui-mode-map
  "C-j" #'lsp-ui-doc-mode)
 (:after lsp-ui-peek
  :map lsp-ui-peek-mode-map
  "h" #'lsp-ui-peek--select-prev-file
  "j" #'lsp-ui-peek--select-next
  "k" #'lsp-ui-peek--select-prev
  "l" #'lsp-ui-peek--select-next-file)
 :nv "gb" #'lsp-ui-peek-jump-backward
 (:after cc-mode
         (:map java-mode-map
          :localleader
          :desc "Add import" "i" #'lsp-java-add-import)
         (:map c++-mode-map
          :localleader :prefix ("t" "toggle")
          :desc "Copy lldb breakpoint" "b" #'+cc/copy-lldb-breakpoint-of-current-line))
 (:after org
         (:map org-mode-map
          :localleader
          "z" #'org-add-note
          "L" #'org-toggle-link-display))
 (:after evil-vars
         (:map evil-window-map
          :leader
          (:prefix "w"
           :desc "evil-window-decrease-height" "-" (cmd! (evil-window-decrease-height 10))
           :desc "evil-window-increase-height" "+" (cmd! (evil-window-increase-height 10))
           :desc "evil-window-decrease-width" "<"  (cmd! (evil-window-decrease-width 20))
           :desc "evil-window-increase-width" ">"  (cmd! (evil-window-increase-width 20)))))
 (:after iedit
         (:map iedit-mode-occurrence-keymap
               "M-D" nil))
 (:after edebug
         (:map edebug-mode-map "c" #'edebug-go-mode))
 (:after evil-org
         (:map evil-org-mode-map
          :i "C-d" nil :i "C-t" nil :i "C-h" nil :i "C-k" nil))
 (:after markdown-mode
         (:map evil-markdown-mode-map
          :i "C-d" nil)
         (:map markdown-mode-map
          :desc "Markdown Cycle" :nv [tab] #'markdown-cycle
          :desc "Insert item below" :ni "<C-return>"  #'+org/insert-item-below
          :desc "Insert item above" :ni "<S-C-return>" #'+org/insert-item-above
          (:localleader
           :desc "highlight" "ih" #'+my/markdown-highlight
           (:when IS-MAC
             :desc "Reveal in Typora" "o" #'+macos/reveal-in-typora)
           (:when IS-LINUX
             :desc "Reveal in Typora" "o" #'+shell/reveal-in-typora)
           :desc "Fix Copy"           "F" #'+my/markdown-copy-fix
           :desc "Insert header line" "-" #'org-table-insert-hline
           :desc "Crete Table from region" "|" #'org-table-create-or-convert-from-region
           :desc "Edit" "x" (+my/simulate-key "C-c C-s")
           (:prefix ("i" . "Insert")
                    "r" #'markdown-table-insert-row
                    "c" #'markdown-table-insert-column))))
 (:when (modulep! :completion vertico)
   (:after vertico
    :map vertico-map
    "C-j" nil "C-k" nil
    "C-j"   #'+vertico/embark-preview
    "C-n"   #'vertico-next
    "C-M-n" #'+vertico/next-candidate-preview
    "C-S-n" #'vertico-next-group
    "C-p"   #'vertico-previous
    "A-v"   #'vertico-scroll-down
    "C-v"   #'vertico-scroll-up
    "C-M-p" #'+vertico/previous-candidate-preview
    "C-S-p" #'vertico-previous-group))
 (:when (modulep! :completion ivy)
   (:after wgrep
    :map wgrep-mode-map
    :nv "gr" #'ivy-occur-revert-buffer
    :n "RET" #'ivy-occur-press-and-switch)
   (:after ivy
    :map ivy-occur-grep-mode-map
    "<backspace>" #'ivy-occur-delete-candidate
    :nv "gr" #'ivy-occur-revert-buffer
    :map ivy-minibuffer-map
    "TAB" #'ivy-partial-or-done
    "<M-return>" #'ivy-immediate-done
    "C-b" nil
    "C-r" #'ivy-reverse-i-search      ; similar to ivy-restrict-to-matches
    "C-j" #'ivy-call-and-recenter
    "C-k" #'ivy-kill-line
    "C-v" #'ivy-scroll-up-command
    "A-v" #'ivy-scroll-down-command))
 (:after minibuffer
  :map minibuffer-local-map
  (:when (modulep! :completion vertico)
    "M-RET" #'vertico-exit-input)
  "C-t" #'marginalia-cycle
  "C-k" #'kill-line)
 (:after magit-mode
         (:map magit-mode-map "M-p" nil "M-n" nil "M-w" nil
          :nv "$" #'magit-process-buffer
          "C-c r" #'code-review-forge-pr-at-point))
 (:after magit-diff
         (:map magit-diff-mode-map            ; for magit diff/rev mode
               "C-o" #'magit-diff-visit-file-other-window))
 (:after magit-blame
         (:map magit-blame-mode-map
          :n "o" #'magit-blame--git-link-commit))
 (:after evil-vars
  :map evil-ex-completion-map
  "C-b" nil
  "C-k" #'kill-line
  "C-d" #'delete-forward-char)
 (:after evil-collection-info
  :map Info-mode-map
  "/" #'Info-search
  "?" #'Info-search-backward)
 (:after company
         (:map company-active-map
               "TAB" nil [tab] nil [backtab] nil
               "C-j" #'company-show-location
               "C-i" #'company-complete-selection))
 (:after adoc-mode
         (:map adoc-mode-map
          :localleader
          :desc "adoc preview" "p" (cmd! (browse-url buffer-file-name))))
 (:after vterm
         (:map vterm-mode-map
               "M-e" nil
               "M-w" #'+workspace/close-window-or-workspace))
 (:after term
         (:map term-raw-map
          :i "M-v" #'term-paste)))

#+end_src
